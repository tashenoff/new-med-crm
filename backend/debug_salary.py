#!/usr/bin/env python3
"""
–û—Ç–ª–∞–¥–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∑–∞—Ä–ø–ª–∞—Ç—ã –≤—Ä–∞—á–∞
"""

import asyncio
import os
from motor.motor_asyncio import AsyncIOMotorClient
from datetime import datetime

# –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
MONGO_URL = os.environ.get('MONGO_URL', 'mongodb://localhost:27017')
DB_NAME = os.environ.get('DB_NAME', 'medcenter')

async def debug_doctor_salary():
    """–û—Ç–ª–∞–¥–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∑–∞—Ä–ø–ª–∞—Ç—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤—Ä–∞—á–∞"""
    client = AsyncIOMotorClient(MONGO_URL)
    db = client[DB_NAME]
    
    try:
        # –ù–∞—Ö–æ–¥–∏–º –≤—Ä–∞—á–∞ –ø–æ –∏–º–µ–Ω–∏
        doctor = await db.doctors.find_one({"full_name": {"$regex": "–≤—Ä–∞—á", "$options": "i"}})
        if not doctor:
            print("‚ùå –í—Ä–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        print(f"üë®‚Äç‚öïÔ∏è –í—Ä–∞—á: {doctor['full_name']}")
        print(f"üìã –£—Å–ª—É–≥–∏ –≤—Ä–∞—á–∞: {doctor.get('services', [])}")
        print(f"üí∞ –¢–∏–ø –æ–ø–ª–∞—Ç—ã: {doctor.get('payment_type')} ({doctor.get('payment_value')}%)")
        print("")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–∏–æ–¥–∞
        date_from = "2025-09-01"
        date_to = "2025-09-30"
        
        # –ù–∞—Ö–æ–¥–∏–º –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –ø–ª–∞–Ω—ã –≤ –ø–µ—Ä–∏–æ–¥–µ
        treatment_plans = await db.treatment_plans.find({
            "payment_status": "paid",
            "payment_date": {"$gte": date_from, "$lte": date_to}
        }).to_list(None)
        
        print(f"üìã –û–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ –≤ –ø–µ—Ä–∏–æ–¥–µ: {len(treatment_plans)}")
        
        doctor_services = doctor.get("services", [])
        treatment_plans_revenue = 0.0
        
        for i, plan in enumerate(treatment_plans):
            print(f"\nüìã –ü–ª–∞–Ω {i+1}: {plan.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
            print(f"   üí∞ –°—É–º–º–∞ –ø–ª–∞–Ω–∞: {plan.get('total_cost', 0)} ‚Ç∏")
            print(f"   üìÖ –î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã: {plan.get('payment_date')}")
            print(f"   üè• –ü–∞—Ü–∏–µ–Ω—Ç: {plan.get('patient_id')}")
            
            plan_services = plan.get("services", [])
            print(f"   üìã –£—Å–ª—É–≥ –≤ –ø–ª–∞–Ω–µ: {len(plan_services)}")
            
            plan_revenue_for_doctor = 0.0
            
            for j, service in enumerate(plan_services):
                service_id = service.get("service_id") or service.get("id") or service.get("serviceId")
                service_name = service.get("service_name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
                service_price = service.get("price", 0)
                quantity = service.get("quantity", 1)
                discount = service.get("discount", 0)
                
                final_price = service_price * quantity * (1 - discount / 100)
                
                print(f"      {j+1}. {service_name}")
                print(f"         ID: {service_id}")
                print(f"         –¶–µ–Ω–∞: {service_price} √ó {quantity} = {service_price * quantity} ‚Ç∏")
                if discount > 0:
                    print(f"         –°–∫–∏–¥–∫–∞: {discount}% ‚Üí {final_price} ‚Ç∏")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å —É—Å–ª—É–≥–∞–º–∏ –≤—Ä–∞—á–∞
                if service_id and service_id in doctor_services:
                    print(f"         ‚úÖ –°–û–í–ü–ê–î–ê–ï–¢ —Å —É—Å–ª—É–≥–∞–º–∏ –≤—Ä–∞—á–∞!")
                    plan_revenue_for_doctor += final_price
                    treatment_plans_revenue += final_price
                else:
                    print(f"         ‚ùå –ù–ï –°–û–í–ü–ê–î–ê–ï–¢ —Å —É—Å–ª—É–≥–∞–º–∏ –≤—Ä–∞—á–∞")
                    print(f"             –£—Å–ª—É–≥–∏ –≤—Ä–∞—á–∞: {doctor_services}")
            
            print(f"   üí∞ –í—ã—Ä—É—á–∫–∞ –≤—Ä–∞—á–∞ —Å —ç—Ç–æ–≥–æ –ø–ª–∞–Ω–∞: {plan_revenue_for_doctor} ‚Ç∏")
        
        print(f"\nüí∞ –ò–¢–û–ì–û –≤—ã—Ä—É—á–∫–∞ –≤—Ä–∞—á–∞ —Å –ø–ª–∞–Ω–æ–≤: {treatment_plans_revenue} ‚Ç∏")
        
        # –†–∞—Å—á–µ—Ç –∑–∞—Ä–ø–ª–∞—Ç—ã
        calculated_salary = treatment_plans_revenue * (doctor.get('payment_value', 0) / 100)
        print(f"üí∏ –ó–∞—Ä–ø–ª–∞—Ç–∞ ({doctor.get('payment_value')}%): {calculated_salary} ‚Ç∏")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        client.close()

if __name__ == "__main__":
    asyncio.run(debug_doctor_salary())
