#!/usr/bin/env python3
"""
–ú–∏–≥—Ä–∞—Ü–∏—è 001: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è services –∫ –≤—Ä–∞—á–∞–º –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
"""

import asyncio
import sys
import os
from datetime import datetime
from motor.motor_asyncio import AsyncIOMotorClient

# –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
MONGO_URL = os.environ.get('MONGO_URL', 'mongodb://localhost:27017')
DB_NAME = os.environ.get('DB_NAME', 'medcenter')

async def migrate_doctors_add_services():
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª–µ services –∫–æ –≤—Å–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –≤—Ä–∞—á–∞–º"""
    print("üîß –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –≤—Ä–∞—á–µ–π...")
    
    client = AsyncIOMotorClient(MONGO_URL)
    db = client[DB_NAME]
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –≤—Ä–∞—á–µ–π –±–µ–∑ –ø–æ–ª—è services
        doctors_without_services = await db.doctors.find({
            "services": {"$exists": False}
        }).to_list(None)
        
        print(f"üìã –ù–∞–π–¥–µ–Ω–æ –≤—Ä–∞—á–µ–π –±–µ–∑ –ø–æ–ª—è services: {len(doctors_without_services)}")
        
        updated_count = 0
        for doctor in doctors_without_services:
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ services
            await db.doctors.update_one(
                {"id": doctor["id"]},
                {
                    "$set": {
                        "services": [],
                        "updated_at": datetime.utcnow()
                    }
                }
            )
            updated_count += 1
            print(f"   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –≤—Ä–∞—á: {doctor.get('full_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} (ID: {doctor['id']})")
        
        print(f"‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –≤—Ä–∞—á–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_count} –∑–∞–ø–∏—Å–µ–π")
        return updated_count
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –≤—Ä–∞—á–µ–π: {str(e)}")
        return 0
    finally:
        client.close()

async def fix_encoding_issues():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print("üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π...")
    
    client = AsyncIOMotorClient(MONGO_URL)
    db = client[DB_NAME]
    
    try:
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
        encoding_fixes = {
            # –í—Ä–∞—á–∏
            "√ê√ë√ê¬∞√ë 1": "–í—Ä–∞—á 1",
            "√ë√ë√ë": "—Ç–µ—Å—Ç",
            "√ë√ê¬µ√ë√ê¬∞√ê¬ø√ê¬µ√ê¬≤√ë": "—Ç–µ—Ä–∞–ø–µ–≤—Ç", 
            "√ë√ê¬∏√ë√ë√ë√ê¬≥": "—Ö–∏—Ä—É—Ä–≥",
            "??????????": "—Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥",
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
            "√ë√ê¬µ√ë√ê¬∞√ê¬ø√ê¬µ√ê¬≤√ë": "—Ç–µ—Ä–∞–ø–µ–≤—Ç",
            "√ë√ê¬∏√ë√ë√ë√ê¬≥": "—Ö–∏—Ä—É—Ä–≥",
            "√ê¬¢√ê¬µ√ë√ê¬∞√ê¬ø√ê¬µ√ê¬≤√ë": "–¢–µ—Ä–∞–ø–µ–≤—Ç",
            
            # –£—Å–ª—É–≥–∏
            "√ê√ê¬µ√ë√ê¬≤√ê¬∏√ë√ê¬Ω√ë√ê¬π √ê¬æ√ë√ê¬º√ê¬æ√ë√ë": "–ü–µ—Ä–≤–∏—á–Ω—ã–π –æ—Å–º–æ—Ç—Ä",
            "√ê¬•√ê¬∏√ë√ë√ë√ê¬≥√ê¬∏√ë": "–•–∏—Ä—É—Ä–≥–∏—è", 
            "√ê¬ª√ê¬µ√ë√ê¬µ√ê¬Ω√ê¬∏√ê¬µ √ê¬ø√ê¬µ√ë√ê¬µ√ê¬Ω√ê¬∏": "–ª–µ—á–µ–Ω–∏–µ –ø–µ—á–µ–Ω–∏",
            "√ë√ê¬µ√ë√ë": "—Ç–µ—Å—Ç",
            
            # –ü–∞—Ü–∏–µ–Ω—Ç—ã
            "√ê√ê¬ª√ê¬µ√ê¬∫√ë": "–ê–ª–µ–∫—Å",
            "√ê√ê¬∞√ê¬≥√ê¬∏√ê¬µ√ê¬≤ √ê√ê¬º√ê¬∏√ë√ë√ê¬∏√ê¬π": "–ù–∞–≥–∏–µ–≤ –î–º–∏—Ç—Ä–∏–π",
            "√ê√ê¬∏√ë√ê¬∞√ê¬ª√ê¬∫√ê¬æ√ê¬≤ √ê√ê¬∏√ê¬∫√ê¬∏√ë√ê¬∞": "–í–∏—Ç–∞–ª–∫–æ–≤ –ù–∏–∫–∏—Ç–∞",
            "√ë√ê¬µ√ë√ë √ê¬∏√ê¬Ω√ë√ë√ê¬∞ 2": "—Ç–µ—Å—Ç –∏–Ω—Å—Ç–∞ 2",
            "√ë√ê¬µ√ë√ë insta": "—Ç–µ—Å—Ç insta"
        }
        
        total_fixed = 0
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≤—Ä–∞—á–µ–π
        print("   üìã –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–º–µ–Ω–∞ –≤—Ä–∞—á–µ–π...")
        doctors = await db.doctors.find({}).to_list(None)
        for doctor in doctors:
            updates = {}
            
            if doctor.get("full_name") in encoding_fixes:
                updates["full_name"] = encoding_fixes[doctor["full_name"]]
                
            if doctor.get("specialty") in encoding_fixes:
                updates["specialty"] = encoding_fixes[doctor["specialty"]]
            
            if updates:
                updates["updated_at"] = datetime.utcnow()
                await db.doctors.update_one(
                    {"id": doctor["id"]}, 
                    {"$set": updates}
                )
                print(f"      ‚úÖ –í—Ä–∞—á: {doctor.get('full_name')} ‚Üí {updates.get('full_name', doctor.get('full_name'))}")
                total_fixed += 1
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤
        print("   üë• –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–º–µ–Ω–∞ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤...")
        patients = await db.patients.find({}).to_list(None)
        for patient in patients:
            updates = {}
            
            if patient.get("full_name") in encoding_fixes:
                updates["full_name"] = encoding_fixes[patient["full_name"]]
            
            if updates:
                updates["updated_at"] = datetime.utcnow()
                await db.patients.update_one(
                    {"id": patient["id"]}, 
                    {"$set": updates}
                )
                print(f"      ‚úÖ –ü–∞—Ü–∏–µ–Ω—Ç: {patient.get('full_name')} ‚Üí {updates.get('full_name')}")
                total_fixed += 1
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —É—Å–ª—É–≥–∏ (service_prices)
        print("   üí∞ –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —É—Å–ª—É–≥...")
        service_prices = await db.service_prices.find({}).to_list(None)
        for service in service_prices:
            updates = {}
            
            if service.get("service_name") in encoding_fixes:
                updates["service_name"] = encoding_fixes[service["service_name"]]
                
            if service.get("category") in encoding_fixes:
                updates["category"] = encoding_fixes[service["category"]]
            
            if updates:
                updates["updated_at"] = datetime.utcnow()
                await db.service_prices.update_one(
                    {"id": service["id"]}, 
                    {"$set": updates}
                )
                print(f"      ‚úÖ –£—Å–ª—É–≥–∞: {service.get('service_name')} ‚Üí {updates.get('service_name', service.get('service_name'))}")
                total_fixed += 1
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
        print("   üè• –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏...")
        specialties = await db.specialties.find({}).to_list(None)
        for specialty in specialties:
            updates = {}
            
            if specialty.get("name") in encoding_fixes:
                updates["name"] = encoding_fixes[specialty["name"]]
            
            if updates:
                updates["updated_at"] = datetime.utcnow()
                await db.specialties.update_one(
                    {"id": specialty["id"]}, 
                    {"$set": updates}
                )
                print(f"      ‚úÖ –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: {specialty.get('name')} ‚Üí {updates.get('name')}")
                total_fixed += 1
        
        print(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –û–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {total_fixed}")
        return total_fixed
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–¥–∏—Ä–æ–≤–∫–∏: {str(e)}")
        return 0
    finally:
        client.close()

async def create_migration_log():
    """–°–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏"""
    client = AsyncIOMotorClient(MONGO_URL)
    db = client[DB_NAME]
    
    try:
        migration_record = {
            "migration_id": "001_add_doctor_services_and_fix_encoding",
            "description": "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è services –∫ –≤—Ä–∞—á–∞–º –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏",
            "executed_at": datetime.utcnow(),
            "status": "completed"
        }
        
        await db.migrations.insert_one(migration_record)
        print("üìù –ó–∞–ø–∏—Å—å –æ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
        
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –æ –º–∏–≥—Ä–∞—Ü–∏–∏: {str(e)}")
    finally:
        client.close()

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏"""
    print("=" * 60)
    print("üöÄ –ú–ò–ì–†–ê–¶–ò–Ø 001: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥ –≤—Ä–∞—á–∞–º –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏")
    print("=" * 60)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª–∞—Å—å –ª–∏ —É–∂–µ —ç—Ç–∞ –º–∏–≥—Ä–∞—Ü–∏—è
        client = AsyncIOMotorClient(MONGO_URL)
        db = client[DB_NAME]
        
        existing_migration = await db.migrations.find_one({
            "migration_id": "001_add_doctor_services_and_fix_encoding"
        })
        
        if existing_migration:
            print("‚ö†Ô∏è –ú–∏–≥—Ä–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–ª–∞—Å—å —Ä–∞–Ω–µ–µ.")
            print(f"   –î–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {existing_migration.get('executed_at')}")
            
            # –°–ø—Ä–∞—à–∏–≤–∞–µ–º, —Ö–æ—Ç–∏–º –ª–∏ –º—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ
            response = input("   –í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ? (y/N): ").strip().lower()
            if response != 'y':
                print("‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
                return
        
        client.close()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
        doctors_updated = await migrate_doctors_add_services()
        encoding_fixed = await fix_encoding_issues()
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –º–∏–≥—Ä–∞—Ü–∏–∏
        await create_migration_log()
        
        print("=" * 60)
        print("‚úÖ –ú–ò–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        print(f"   üìã –í—Ä–∞—á–µ–π –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {doctors_updated}")
        print(f"   üî§ –ó–∞–ø–∏—Å–µ–π —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π: {encoding_fixed}")
        print("=" * 60)
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main())
