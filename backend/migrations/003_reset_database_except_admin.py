#!/usr/bin/env python3
"""
–ú–∏–≥—Ä–∞—Ü–∏—è 003: –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∫—Ä–æ–º–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
"""

import asyncio
import sys
import os
from datetime import datetime, timedelta
from motor.motor_asyncio import AsyncIOMotorClient
import uuid

# –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
MONGO_URL = os.environ.get('MONGO_URL', 'mongodb://localhost:27017')
DB_NAME = os.environ.get('DB_NAME', 'medcenter')

async def check_collections():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞–∫–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏...")
    
    client = AsyncIOMotorClient(MONGO_URL)
    db = client[DB_NAME]
    
    try:
        collections = await db.list_collection_names()
        print(f"üìã –ù–∞–π–¥–µ–Ω–æ –∫–æ–ª–ª–µ–∫—Ü–∏–π: {len(collections)}")
        
        for collection in sorted(collections):
            count = await db[collection].count_documents({})
            print(f"   üìÅ {collection}: {count} –∑–∞–ø–∏—Å–µ–π")
        
        return collections
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–ª–ª–µ–∫—Ü–∏–π: {str(e)}")
        return []
    finally:
        client.close()

async def clear_collections_except_admin():
    """–û—á–∏—â–∞–µ—Ç –≤—Å–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∫—Ä–æ–º–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    print("üóëÔ∏è –û—á–∏—â–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏–∏ (–∫—Ä–æ–º–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)...")
    
    client = AsyncIOMotorClient(MONGO_URL)
    db = client[DB_NAME]
    
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        admin_user = await db.users.find_one({"email": "admin@medcenter.com"})
        if not admin_user:
            print("‚ö†Ô∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω! –°–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤–æ–≥–æ...")
            admin_user = None
        else:
            print(f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–∞–π–¥–µ–Ω: {admin_user.get('full_name', 'Admin')}")
        
        # –ö–æ–ª–ª–µ–∫—Ü–∏–∏ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ (–Ω–µ —É–¥–∞–ª—è–µ–º users –ø–æ–ª–Ω–æ—Å—Ç—å—é)
        collections_to_clear = [
            'doctors', 'patients', 'appointments', 'treatment_plans',
            'service_prices', 'specialties', 'payment_types',
            'crm_clients', 'crm_leads', 'crm_deals', 'crm_sources', 'crm_managers',
            'documents', 'services', 'doctor_schedules'
        ]
        
        cleared_count = 0
        for collection_name in collections_to_clear:
            if collection_name in await db.list_collection_names():
                result = await db[collection_name].delete_many({})
                if result.deleted_count > 0:
                    print(f"   üóëÔ∏è {collection_name}: —É–¥–∞–ª–µ–Ω–æ {result.deleted_count} –∑–∞–ø–∏—Å–µ–π")
                    cleared_count += result.deleted_count
        
        # –û—á–∏—â–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫—Ä–æ–º–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        non_admin_users = await db.users.delete_many({
            "email": {"$ne": "admin@medcenter.com"}
        })
        if non_admin_users.deleted_count > 0:
            print(f"   üóëÔ∏è users (–∫—Ä–æ–º–µ –∞–¥–º–∏–Ω–∞): —É–¥–∞–ª–µ–Ω–æ {non_admin_users.deleted_count} –∑–∞–ø–∏—Å–µ–π")
            cleared_count += non_admin_users.deleted_count
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ –±—ã–ª–æ
        if not admin_user:
            from passlib.context import CryptContext
            pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")
            
            admin_user = {
                "id": str(uuid.uuid4()),
                "full_name": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
                "email": "admin@medcenter.com",
                "password": pwd_context.hash("admin123"),
                "role": "admin",
                "is_active": True,
                "created_at": datetime.utcnow(),
                "updated_at": datetime.utcnow()
            }
            await db.users.insert_one(admin_user)
            print("   ‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
        
        print(f"‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {cleared_count}")
        return cleared_count
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {str(e)}")
        return 0
    finally:
        client.close()

async def create_fresh_test_data():
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–µ —á–∏—Å—Ç—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"""
    print("üÜï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...")
    
    client = AsyncIOMotorClient(MONGO_URL)
    db = client[DB_NAME]
    
    try:
        created_count = 0
        
        # 1. –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
        print("   üè• –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏...")
        specialties = [
            {"id": str(uuid.uuid4()), "name": "–¢–µ—Ä–∞–ø–µ–≤—Ç", "description": "–í—Ä–∞—á –æ–±—â–µ–π –ø—Ä–∞–∫—Ç–∏–∫–∏", "is_active": True, "created_at": datetime.utcnow(), "updated_at": datetime.utcnow()},
            {"id": str(uuid.uuid4()), "name": "–•–∏—Ä—É—Ä–≥", "description": "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ —Ö–∏—Ä—É—Ä–≥–∏—á–µ—Å–∫–∏–º –æ–ø–µ—Ä–∞—Ü–∏—è–º", "is_active": True, "created_at": datetime.utcnow(), "updated_at": datetime.utcnow()},
            {"id": str(uuid.uuid4()), "name": "–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥", "description": "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –ª–µ—á–µ–Ω–∏—é –∑—É–±–æ–≤", "is_active": True, "created_at": datetime.utcnow(), "updated_at": datetime.utcnow()},
            {"id": str(uuid.uuid4()), "name": "–ö–∞—Ä–¥–∏–æ–ª–æ–≥", "description": "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ —Å–µ—Ä–¥–µ—á–Ω–æ-—Å–æ—Å—É–¥–∏—Å—Ç—ã–º –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è–º", "is_active": True, "created_at": datetime.utcnow(), "updated_at": datetime.utcnow()}
        ]
        await db.specialties.insert_many(specialties)
        created_count += len(specialties)
        print(f"      ‚úÖ –°–æ–∑–¥–∞–Ω–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π: {len(specialties)}")
        
        # 2. –°–æ–∑–¥–∞–µ–º —É—Å–ª—É–≥–∏ (—Ü–µ–Ω–æ–≤–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞)
        print("   üí∞ –°–æ–∑–¥–∞–µ–º —É—Å–ª—É–≥–∏...")
        services = [
            {"id": str(uuid.uuid4()), "service_name": "–ü–µ—Ä–≤–∏—á–Ω—ã–π –æ—Å–º–æ—Ç—Ä", "service_code": "EXAM001", "category": "–¢–µ—Ä–∞–ø–µ–≤—Ç", "price": 3000.0, "unit": "–ø—Ä–æ—Ü–µ–¥—É—Ä–∞", "description": "–ü–µ—Ä–≤–∏—á–Ω—ã–π –æ—Å–º–æ—Ç—Ä –ø–∞—Ü–∏–µ–Ω—Ç–∞", "is_active": True, "created_at": datetime.utcnow(), "updated_at": datetime.utcnow()},
            {"id": str(uuid.uuid4()), "service_name": "–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –æ—Å–º–æ—Ç—Ä", "service_code": "EXAM002", "category": "–¢–µ—Ä–∞–ø–µ–≤—Ç", "price": 2000.0, "unit": "–ø—Ä–æ—Ü–µ–¥—É—Ä–∞", "description": "–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –æ—Å–º–æ—Ç—Ä –ø–∞—Ü–∏–µ–Ω—Ç–∞", "is_active": True, "created_at": datetime.utcnow(), "updated_at": datetime.utcnow()},
            {"id": str(uuid.uuid4()), "service_name": "–•–∏—Ä—É—Ä–≥–∏—á–µ—Å–∫–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è", "service_code": "SURG001", "category": "–•–∏—Ä—É—Ä–≥", "price": 50000.0, "unit": "–æ–ø–µ—Ä–∞—Ü–∏—è", "description": "–•–∏—Ä—É—Ä–≥–∏—á–µ—Å–∫–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ", "is_active": True, "created_at": datetime.utcnow(), "updated_at": datetime.utcnow()},
            {"id": str(uuid.uuid4()), "service_name": "–õ–µ—á–µ–Ω–∏–µ –∫–∞—Ä–∏–µ—Å–∞", "service_code": "DENT001", "category": "–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥", "price": 15000.0, "unit": "–∑—É–±", "description": "–õ–µ—á–µ–Ω–∏–µ –∫–∞—Ä–∏–µ—Å–∞ –æ–¥–Ω–æ–≥–æ –∑—É–±–∞", "is_active": True, "created_at": datetime.utcnow(), "updated_at": datetime.utcnow()},
            {"id": str(uuid.uuid4()), "service_name": "–ß–∏—Å—Ç–∫–∞ –∑—É–±–æ–≤", "service_code": "DENT002", "category": "–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥", "price": 8000.0, "unit": "–ø—Ä–æ—Ü–µ–¥—É—Ä–∞", "description": "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —á–∏—Å—Ç–∫–∞ –∑—É–±–æ–≤", "is_active": True, "created_at": datetime.utcnow(), "updated_at": datetime.utcnow()},
            {"id": str(uuid.uuid4()), "service_name": "–≠–ö–ì", "service_code": "CARD001", "category": "–ö–∞—Ä–¥–∏–æ–ª–æ–≥", "price": 2500.0, "unit": "–ø—Ä–æ—Ü–µ–¥—É—Ä–∞", "description": "–≠–ª–µ–∫—Ç—Ä–æ–∫–∞—Ä–¥–∏–æ–≥—Ä–∞–º–º–∞", "is_active": True, "created_at": datetime.utcnow(), "updated_at": datetime.utcnow()}
        ]
        await db.service_prices.insert_many(services)
        created_count += len(services)
        print(f"      ‚úÖ –°–æ–∑–¥–∞–Ω–æ —É—Å–ª—É–≥: {len(services)}")
        
        # 3. –°–æ–∑–¥–∞–µ–º –≤—Ä–∞—á–µ–π —Å —É—Å–ª—É–≥–∞–º–∏
        print("   üë®‚Äç‚öïÔ∏è –°–æ–∑–¥–∞–µ–º –≤—Ä–∞—á–µ–π...")
        doctors = [
            {
                "id": str(uuid.uuid4()), 
                "full_name": "–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á", 
                "specialty": "–¢–µ—Ä–∞–ø–µ–≤—Ç", 
                "phone": "+7-777-123-4567", 
                "calendar_color": "#3B82F6", 
                "is_active": True, 
                "payment_type": "percentage", 
                "payment_value": 40.0, 
                "currency": "KZT",
                "services": [services[0]["id"], services[1]["id"]], # –¢–µ—Ä–∞–ø–µ–≤—Ç–∏—á–µ—Å–∫–∏–µ —É—Å–ª—É–≥–∏
                "created_at": datetime.utcnow(), 
                "updated_at": datetime.utcnow()
            },
            {
                "id": str(uuid.uuid4()), 
                "full_name": "–ü–µ—Ç—Ä–æ–≤ –ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤–∏—á", 
                "specialty": "–•–∏—Ä—É—Ä–≥", 
                "phone": "+7-777-234-5678", 
                "calendar_color": "#EF4444", 
                "is_active": True, 
                "payment_type": "percentage", 
                "payment_value": 30.0, 
                "currency": "KZT",
                "services": [services[2]["id"]], # –•–∏—Ä—É—Ä–≥–∏—á–µ—Å–∫–∏–µ —É—Å–ª—É–≥–∏
                "created_at": datetime.utcnow(), 
                "updated_at": datetime.utcnow()
            },
            {
                "id": str(uuid.uuid4()), 
                "full_name": "–°–∏–¥–æ—Ä–æ–≤–∞ –ê–Ω–Ω–∞ –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–Ω–∞", 
                "specialty": "–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥", 
                "phone": "+7-777-345-6789", 
                "calendar_color": "#10B981", 
                "is_active": True, 
                "payment_type": "fixed", 
                "payment_value": 200000.0, 
                "currency": "KZT",
                "services": [services[3]["id"], services[4]["id"]], # –°—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —É—Å–ª—É–≥–∏
                "created_at": datetime.utcnow(), 
                "updated_at": datetime.utcnow()
            },
            {
                "id": str(uuid.uuid4()), 
                "full_name": "–ö–æ–∑–ª–æ–≤ –ú–∏—Ö–∞–∏–ª –°–µ—Ä–≥–µ–µ–≤–∏—á", 
                "specialty": "–ö–∞—Ä–¥–∏–æ–ª–æ–≥", 
                "phone": "+7-777-456-7890", 
                "calendar_color": "#8B5CF6", 
                "is_active": True, 
                "payment_type": "percentage", 
                "payment_value": 45.0, 
                "currency": "KZT",
                "services": [services[5]["id"]], # –ö–∞—Ä–¥–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —É—Å–ª—É–≥–∏
                "created_at": datetime.utcnow(), 
                "updated_at": datetime.utcnow()
            }
        ]
        await db.doctors.insert_many(doctors)
        created_count += len(doctors)
        print(f"      ‚úÖ –°–æ–∑–¥–∞–Ω–æ –≤—Ä–∞—á–µ–π: {len(doctors)}")
        
        # 4. –°–æ–∑–¥–∞–µ–º –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤
        print("   üë• –°–æ–∑–¥–∞–µ–º –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤...")
        patients = [
            {"id": str(uuid.uuid4()), "full_name": "–ê–ª–µ–∫—Å–µ–µ–≤ –ê–ª–µ–∫—Å–µ–π –ê–ª–µ–∫—Å–µ–µ–≤–∏—á", "phone": "+7-701-111-2222", "iin": "123456789012", "birth_date": "1985-03-15", "gender": "male", "source": "walk_in", "notes": "–†–µ–≥—É–ª—è—Ä–Ω—ã–π –ø–∞—Ü–∏–µ–Ω—Ç", "created_at": datetime.utcnow(), "updated_at": datetime.utcnow()},
            {"id": str(uuid.uuid4()), "full_name": "–ù–∏–∫–æ–ª–∞–µ–≤–∞ –û–ª—å–≥–∞ –ü–µ—Ç—Ä–æ–≤–Ω–∞", "phone": "+7-701-222-3333", "iin": "234567890123", "birth_date": "1992-07-22", "gender": "female", "source": "referral", "notes": "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–∞—Ä–¥–∏–æ–ª–æ–≥–æ–º", "created_at": datetime.utcnow(), "updated_at": datetime.utcnow()},
            {"id": str(uuid.uuid4()), "full_name": "–°–º–∏—Ä–Ω–æ–≤ –î–º–∏—Ç—Ä–∏–π –í–∏–∫—Ç–æ—Ä–æ–≤–∏—á", "phone": "+7-701-333-4444", "iin": "345678901234", "birth_date": "1978-11-05", "gender": "male", "source": "online", "notes": "–ó–∞–ø–∏—Å–∞–ª—Å—è —á–µ—Ä–µ–∑ —Å–∞–π—Ç", "created_at": datetime.utcnow(), "updated_at": datetime.utcnow()},
            {"id": str(uuid.uuid4()), "full_name": "–§–µ–¥–æ—Ä–æ–≤–∞ –ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–Ω–∞", "phone": "+7-701-444-5555", "iin": "456789012345", "birth_date": "1990-01-18", "gender": "female", "source": "walk_in", "notes": "–ü–µ—Ä–≤–∏—á–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ", "created_at": datetime.utcnow(), "updated_at": datetime.utcnow()}
        ]
        await db.patients.insert_many(patients)
        created_count += len(patients)
        print(f"      ‚úÖ –°–æ–∑–¥–∞–Ω–æ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤: {len(patients)}")
        
        # 5. –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏–µ–º
        print("   üìÖ –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏–µ–º...")
        appointments = [
            # –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞—Ä–ø–ª–∞—Ç
            {"id": str(uuid.uuid4()), "patient_id": patients[0]["id"], "doctor_id": doctors[0]["id"], "appointment_date": "2025-09-10", "appointment_time": "10:00", "price": 3000.0, "status": "completed", "reason": "–ü–ª–∞–Ω–æ–≤—ã–π –æ—Å–º–æ—Ç—Ä", "notes": "–û—Å–º–æ—Ç—Ä –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ", "created_at": datetime.utcnow(), "updated_at": datetime.utcnow()},
            {"id": str(uuid.uuid4()), "patient_id": patients[1]["id"], "doctor_id": doctors[2]["id"], "appointment_date": "2025-09-09", "appointment_time": "14:30", "price": 15000.0, "status": "completed", "reason": "–õ–µ—á–µ–Ω–∏–µ –∫–∞—Ä–∏–µ—Å–∞", "notes": "–õ–µ—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ", "created_at": datetime.utcnow(), "updated_at": datetime.utcnow()},
            {"id": str(uuid.uuid4()), "patient_id": patients[2]["id"], "doctor_id": doctors[1]["id"], "appointment_date": "2025-09-08", "appointment_time": "09:00", "price": 50000.0, "status": "completed", "reason": "–•–∏—Ä—É—Ä–≥–∏—á–µ—Å–∫–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è", "notes": "–û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ", "created_at": datetime.utcnow(), "updated_at": datetime.utcnow()},
            
            # –ë—É–¥—É—â–∏–µ –∑–∞–ø–∏—Å–∏
            {"id": str(uuid.uuid4()), "patient_id": patients[3]["id"], "doctor_id": doctors[3]["id"], "appointment_date": "2025-09-15", "appointment_time": "11:00", "price": 2500.0, "status": "confirmed", "reason": "–≠–ö–ì", "notes": "–ü–ª–∞–Ω–æ–≤–æ–µ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ", "created_at": datetime.utcnow(), "updated_at": datetime.utcnow()},
            {"id": str(uuid.uuid4()), "patient_id": patients[0]["id"], "doctor_id": doctors[0]["id"], "appointment_date": "2025-09-20", "appointment_time": "15:30", "price": 2000.0, "status": "confirmed", "reason": "–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –æ—Å–º–æ—Ç—Ä", "notes": "–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–π –æ—Å–º–æ—Ç—Ä", "created_at": datetime.utcnow(), "updated_at": datetime.utcnow()}
        ]
        await db.appointments.insert_many(appointments)
        created_count += len(appointments)
        print(f"      ‚úÖ –°–æ–∑–¥–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(appointments)}")
        
        # 6. –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω—ã –ª–µ—á–µ–Ω–∏—è
        print("   üìã –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω—ã –ª–µ—á–µ–Ω–∏—è...")
        treatment_plans = [
            {
                "id": str(uuid.uuid4()),
                "patient_id": patients[0]["id"],
                "title": "–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ –ª–µ—á–µ–Ω–∏–µ",
                "description": "–ü–ª–∞–Ω –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –ª–µ—á–µ–Ω–∏—è –¥–ª—è –ø–∞—Ü–∏–µ–Ω—Ç–∞",
                "services": [
                    {"service_id": services[0]["id"], "service_name": services[0]["service_name"], "price": 3000.0, "quantity": 1, "discount": 0},
                    {"service_id": services[1]["id"], "service_name": services[1]["service_name"], "price": 2000.0, "quantity": 2, "discount": 10}
                ],
                "total_cost": 6800.0,
                "status": "approved",
                "created_by": "admin",
                "created_by_name": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
                "payment_status": "paid",
                "paid_amount": 6800.0,
                "payment_date": datetime.utcnow() - timedelta(days=2),
                "execution_status": "completed",
                "created_at": datetime.utcnow(),
                "updated_at": datetime.utcnow()
            },
            {
                "id": str(uuid.uuid4()),
                "patient_id": patients[1]["id"],
                "title": "–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –ª–µ—á–µ–Ω–∏–µ",
                "description": "–õ–µ—á–µ–Ω–∏–µ –∏ –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∞ –∑—É–±–æ–≤",
                "services": [
                    {"service_id": services[3]["id"], "service_name": services[3]["service_name"], "price": 15000.0, "quantity": 2, "discount": 0},
                    {"service_id": services[4]["id"], "service_name": services[4]["service_name"], "price": 8000.0, "quantity": 1, "discount": 0}
                ],
                "total_cost": 38000.0,
                "status": "approved",
                "created_by": "admin",
                "created_by_name": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
                "payment_status": "paid",
                "paid_amount": 38000.0,
                "payment_date": datetime.utcnow() - timedelta(days=1),
                "execution_status": "in_progress",
                "created_at": datetime.utcnow(),
                "updated_at": datetime.utcnow()
            }
        ]
        await db.treatment_plans.insert_many(treatment_plans)
        created_count += len(treatment_plans)
        print(f"      ‚úÖ –°–æ–∑–¥–∞–Ω–æ –ø–ª–∞–Ω–æ–≤ –ª–µ—á–µ–Ω–∏—è: {len(treatment_plans)}")
        
        # 7. –°–æ–∑–¥–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ CRM
        print("   üìû –°–æ–∑–¥–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ CRM...")
        crm_sources = [
            {"id": str(uuid.uuid4()), "name": "–°–∞–π—Ç", "description": "–ó–∞—è–≤–∫–∏ —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–∞–π—Ç–∞", "is_active": True, "created_at": datetime.utcnow(), "updated_at": datetime.utcnow()},
            {"id": str(uuid.uuid4()), "name": "–¢–µ–ª–µ—Ñ–æ–Ω", "description": "–ó–≤–æ–Ω–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤", "is_active": True, "created_at": datetime.utcnow(), "updated_at": datetime.utcnow()},
            {"id": str(uuid.uuid4()), "name": "–†–µ–∫–ª–∞–º–∞", "description": "–†–µ–∫–ª–∞–º–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏", "is_active": True, "created_at": datetime.utcnow(), "updated_at": datetime.utcnow()},
            {"id": str(uuid.uuid4()), "name": "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", "description": "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤", "is_active": True, "created_at": datetime.utcnow(), "updated_at": datetime.utcnow()}
        ]
        await db.crm_sources.insert_many(crm_sources)
        created_count += len(crm_sources)
        print(f"      ‚úÖ –°–æ–∑–¥–∞–Ω–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {len(crm_sources)}")
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –°–æ–∑–¥–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {created_count}")
        return created_count
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        return 0
    finally:
        client.close()

async def create_migration_log():
    """–°–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏"""
    client = AsyncIOMotorClient(MONGO_URL)
    db = client[DB_NAME]
    
    try:
        migration_record = {
            "migration_id": "003_reset_database_except_admin",
            "description": "–ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ë–î –∫—Ä–æ–º–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
            "executed_at": datetime.utcnow(),
            "status": "completed"
        }
        
        await db.migrations.insert_one(migration_record)
        print("üìù –ó–∞–ø–∏—Å—å –æ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
        
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –æ –º–∏–≥—Ä–∞—Ü–∏–∏: {str(e)}")
    finally:
        client.close()

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏"""
    print("=" * 80)
    print("üöÄ –ú–ò–ì–†–ê–¶–ò–Ø 003: –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 80)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏–∏
        collections = await check_collections()
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print("\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è —É–¥–∞–ª–∏—Ç –í–°–ï –¥–∞–Ω–Ω—ã–µ –∫—Ä–æ–º–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        response = input("   –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (yes/NO): ").strip().lower()
        if response not in ['yes', 'y']:
            print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
            return
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        cleared_count = await clear_collections_except_admin()
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        created_count = await create_fresh_test_data()
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –º–∏–≥—Ä–∞—Ü–∏–∏
        await create_migration_log()
        
        print("=" * 80)
        print("‚úÖ –ú–ò–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        print(f"   üóëÔ∏è  –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {cleared_count}")
        print(f"   üÜï –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π: {created_count}")
        print("   üë®‚Äçüíº –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω: admin@medcenter.com / admin123")
        print("=" * 80)
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main())

