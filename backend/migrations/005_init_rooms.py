import asyncio
import os
import sys
from motor.motor_asyncio import AsyncIOMotorClient
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

async def init_rooms():
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
    mongo_url = os.environ.get('MONGO_URL', 'mongodb://localhost:27017')
    db_name = os.environ.get('DB_NAME', 'medical_crm')
    
    client = AsyncIOMotorClient(mongo_url)
    db = client[db_name]
    
    try:
        print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–π –∫–∞–±–∏–Ω–µ—Ç–æ–≤...")
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        collections = await db.list_collection_names()
        
        if 'rooms' not in collections:
            await db.create_collection('rooms')
            print("‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è 'rooms' —Å–æ–∑–¥–∞–Ω–∞")
        
        if 'room_schedules' not in collections:
            await db.create_collection('room_schedules')
            print("‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è 'room_schedules' —Å–æ–∑–¥–∞–Ω–∞")
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        await db.rooms.create_index("id", unique=True)
        await db.room_schedules.create_index("id", unique=True)
        await db.room_schedules.create_index([("room_id", 1), ("day_of_week", 1), ("start_time", 1)])
        
        print("‚úÖ –ò–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–±–∏–Ω–µ—Ç–æ–≤
        rooms_count = await db.rooms.count_documents({})
        print(f"üìä –ö–∞–±–∏–Ω–µ—Ç–æ–≤ –≤ –±–∞–∑–µ: {rooms_count}")
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –∫–∞–±–∏–Ω–µ—Ç–æ–≤, —Å–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä
        if rooms_count == 0:
            from uuid import uuid4
            
            sample_room = {
                "id": str(uuid4()),
                "name": "–ö–∞–±–∏–Ω–µ—Ç 1",
                "number": "101",
                "description": "–û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–±–∏–Ω–µ—Ç",
                "equipment": [],
                "is_active": True,
                "created_at": datetime.utcnow(),
                "updated_at": datetime.utcnow()
            }
            
            await db.rooms.insert_one(sample_room)
            print("‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–∏–º–µ—Ä –∫–∞–±–∏–Ω–µ—Ç–∞")
        
        print("üéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        raise
    finally:
        client.close()

if __name__ == "__main__":
    asyncio.run(init_rooms())
