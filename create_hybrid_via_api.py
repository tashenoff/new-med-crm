#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script to create a test doctor with hybrid payment via API
"""

import urllib.request
import urllib.parse
import json

def main():
    print("üè• –°–û–ó–î–ê–ù–ò–ï –í–†–ê–ß–ê –° –ì–ò–ë–†–ò–î–ù–û–ô –û–ü–õ–ê–¢–û–ô –ß–ï–†–ï–ó API")
    print("=" * 60)

    # API endpoints
    base_url = "http://localhost:8001"  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ—Ä—Ç FastAPI
    doctors_url = f"{base_url}/api/doctors"

    # –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–Ω—É–∂–µ–Ω —Ç–æ–∫–µ–Ω)
    print("‚ÑπÔ∏è  –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–∞—á–∞ —á–µ—Ä–µ–∑ API –Ω—É–∂–µ–Ω —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
    print("   –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞ (Developer Tools -> Network -> Headers)")
    print("   –ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞, –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞")
    
    token = input("üîë –í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ").strip()

    # –î–∞–Ω–Ω—ã–µ –≤—Ä–∞—á–∞ —Å –≥–∏–±—Ä–∏–¥–Ω–æ–π –æ–ø–ª–∞—Ç–æ–π
    doctor_data = {
        "full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –í—Ä–∞—á API",
        "specialty": "–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥-—Ö–∏—Ä—É—Ä–≥", 
        "phone": "+7-777-888-9999",
        "calendar_color": "#E91E63",
        "payment_type": "hybrid",
        "payment_value": 75000.0,  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —á–∞—Å—Ç—å
        "hybrid_percentage_value": 8.5,  # –ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —á–∞—Å—Ç—å
        "currency": "KZT",
        "services": [],
        "payment_mode": "general"
    }

    try:
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        data = json.dumps(doctor_data).encode('utf-8')
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å
        req = urllib.request.Request(doctors_url, data=data)
        req.add_header('Content-Type', 'application/json')
        
        if token:
            req.add_header('Authorization', f'Bearer {token}')
            print("‚úÖ –¢–æ–∫–µ–Ω –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∏")
        else:
            print("‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")

        print(f"\nüöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ {doctors_url}")
        print(f"   üìä –î–∞–Ω–Ω—ã–µ: {json.dumps(doctor_data, ensure_ascii=False, indent=2)}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        with urllib.request.urlopen(req, timeout=10) as response:
            status_code = response.getcode()
            response_data = response.read().decode('utf-8')
            
            print(f"\nüì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:")
            print(f"   –°—Ç–∞—Ç—É—Å: {status_code}")
            
            if status_code == 201:
                result = json.loads(response_data)
                print("‚úÖ –í—Ä–∞—á —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
                print(f"   ID: {result.get('id')}")
                print(f"   –ò–º—è: {result.get('full_name')}")
                print(f"   –¢–∏–ø –æ–ø–ª–∞—Ç—ã: {result.get('payment_type')}")
                print(f"   üí∞ –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —á–∞—Å—Ç—å: {result.get('payment_value')} ‚Ç∏")
                print(f"   üìä –ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —á–∞—Å—Ç—å: {result.get('hybrid_percentage_value')}%")
            else:
                print(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {status_code}")
                print(f"   –û—Ç–≤–µ—Ç: {response_data}")
                
    except urllib.error.HTTPError as e:
        print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {e.code}")
        if e.code == 401:
            print("   –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω")
        elif e.code == 422:
            print("   –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
            try:
                error_detail = json.loads(e.read().decode('utf-8'))
                print(f"   –î–µ—Ç–∞–ª–∏: {json.dumps(error_detail, ensure_ascii=False, indent=2)}")
            except:
                print(f"   –û—Ç–≤–µ—Ç: {e.read().decode('utf-8')}")
        else:
            print(f"   –û—Ç–≤–µ—Ç: {e.read().decode('utf-8')}")
            
    except urllib.error.URLError as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É: {e.reason}")
        print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ backend –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8001")
        print("   –î–ª—è –∑–∞–ø—É—Å–∫–∞: cd backend && python -m uvicorn server:app --host 0.0.0.0 --port 8001")
        
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == '__main__':
    main()
