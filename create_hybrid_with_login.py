#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script to create a test doctor with hybrid payment via API with login
"""

import urllib.request
import urllib.parse
import json

def get_auth_token(base_url, email, password):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    auth_url = f"{base_url}/api/auth/login"
    
    # –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    auth_data = {
        "email": email,
        "password": password
    }
    
    try:
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (JSON)
        data = json.dumps(auth_data).encode('utf-8')
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å
        req = urllib.request.Request(auth_url, data=data)
        req.add_header('Content-Type', 'application/json')
        
        print(f"üîë –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–∞ {auth_url}")
        print(f"   Email: {email}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        with urllib.request.urlopen(req, timeout=10) as response:
            status_code = response.getcode()
            response_data = response.read().decode('utf-8')
            
            if status_code == 200:
                result = json.loads(response_data)
                token = result.get('access_token')
                if token:
                    print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
                    return token
                else:
                    print("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ")
                    print(f"–û—Ç–≤–µ—Ç: {response_data}")
                    return None
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {status_code}")
                print(f"–û—Ç–≤–µ—Ç: {response_data}")
                return None
                
    except urllib.error.HTTPError as e:
        print(f"‚ùå HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e.code}")
        try:
            error_data = e.read().decode('utf-8')
            print(f"   –û—Ç–≤–µ—Ç: {error_data}")
        except:
            pass
        return None
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        return None

def create_doctor_with_token(base_url, token):
    """–°–æ–∑–¥–∞–µ—Ç –≤—Ä–∞—á–∞ —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º"""
    doctors_url = f"{base_url}/api/doctors"
    
    # –î–∞–Ω–Ω—ã–µ –≤—Ä–∞—á–∞ —Å –≥–∏–±—Ä–∏–¥–Ω–æ–π –æ–ø–ª–∞—Ç–æ–π
    doctor_data = {
        "full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –í—Ä–∞—á –ì–∏–±—Ä–∏–¥",
        "specialty": "–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥-–æ—Ä—Ç–æ–ø–µ–¥", 
        "phone": "+7-777-999-1234",
        "calendar_color": "#9C27B0",
        "payment_type": "hybrid",
        "payment_value": 60000.0,  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —á–∞—Å—Ç—å
        "hybrid_percentage_value": 15.0,  # –ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —á–∞—Å—Ç—å
        "currency": "KZT",
        "services": [],
        "payment_mode": "general"
    }

    try:
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        data = json.dumps(doctor_data).encode('utf-8')
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å
        req = urllib.request.Request(doctors_url, data=data)
        req.add_header('Content-Type', 'application/json')
        req.add_header('Authorization', f'Bearer {token}')

        print(f"\nüöÄ –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–∞—á–∞ –Ω–∞ {doctors_url}")
        print(f"   üìä –î–∞–Ω–Ω—ã–µ: {json.dumps(doctor_data, ensure_ascii=False, indent=2)}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        with urllib.request.urlopen(req, timeout=10) as response:
            status_code = response.getcode()
            response_data = response.read().decode('utf-8')
            
            print(f"\nüì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:")
            print(f"   –°—Ç–∞—Ç—É—Å: {status_code}")
            
            if status_code in [200, 201]:
                result = json.loads(response_data)
                print("üéâ –í–†–ê–ß –°–û–ó–î–ê–ù –£–°–ü–ï–®–ù–û!")
                print(f"   üÜî ID: {result.get('id')}")
                print(f"   üë®‚Äç‚öïÔ∏è –ò–º—è: {result.get('full_name')}")
                print(f"   üíº –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: {result.get('specialty')}")
                print(f"   üí∞ –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —á–∞—Å—Ç—å: {result.get('payment_value')} ‚Ç∏")
                print(f"   üìä –ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —á–∞—Å—Ç—å: {result.get('hybrid_percentage_value')}%")
                print(f"   üîó –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {result.get('payment_value')}‚Ç∏ + {result.get('hybrid_percentage_value')}%")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≥–∏–±—Ä–∏–¥–Ω—ã–µ –ø–æ–ª—è —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
                if (result.get('payment_type') == 'hybrid' and 
                    result.get('payment_value') == 60000.0 and 
                    result.get('hybrid_percentage_value') == 15.0):
                    print(f"\n‚úÖ –í–°–ï –ì–ò–ë–†–ò–î–ù–´–ï –ü–û–õ–Ø –°–û–•–†–ê–ù–ï–ù–´ –ö–û–†–†–ï–ö–¢–ù–û!")
                else:
                    print(f"\n‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≥–∏–±—Ä–∏–¥–Ω—ã—Ö –ø–æ–ª–µ–π:")
                    print(f"   payment_type: {result.get('payment_type')}")
                    print(f"   payment_value: {result.get('payment_value')}")
                    print(f"   hybrid_percentage_value: {result.get('hybrid_percentage_value')}")
                
                print(f"\n‚úÖ –¢–µ–ø–µ—Ä—å –æ—Ç–∫—Ä–æ–π—Ç–µ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ:")
                print(f"   1. –†–∞–∑–¥–µ–ª '–í—Ä–∞—á–∏'")
                print(f"   2. –ù–∞–π–¥–∏—Ç–µ '{result.get('full_name')}'") 
                print(f"   3. –î–æ–ª–∂–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è: üîó 60,000‚Ç∏ + 15.0%")
                
                return True
            else:
                print(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {status_code}")
                print(f"   –û—Ç–≤–µ—Ç: {response_data}")
                return False
                
    except urllib.error.HTTPError as e:
        print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {e.code}")
        try:
            error_detail = json.loads(e.read().decode('utf-8'))
            print(f"   –î–µ—Ç–∞–ª–∏: {json.dumps(error_detail, ensure_ascii=False, indent=2)}")
        except:
            print(f"   –û—Ç–≤–µ—Ç: {e.read().decode('utf-8')}")
        return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–∞—á–∞: {e}")
        return False

def main():
    print("üè• –°–û–ó–î–ê–ù–ò–ï –í–†–ê–ß–ê –° –ì–ò–ë–†–ò–î–ù–û–ô –û–ü–õ–ê–¢–û–ô")
    print("=" * 50)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    base_url = "http://localhost:8001"
    email = "admin@medcenter.com"
    password = "admin123"
    
    print(f"üåê Backend URL: {base_url}")
    print(f"üë§ –õ–æ–≥–∏–Ω: {email}")
    
    # –®–∞–≥ 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    token = get_auth_token(base_url, email, password)
    if not token:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
        return False
    
    # –®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–∞—á–∞
    success = create_doctor_with_token(base_url, token)
    
    if success:
        print("\nüéØ –ó–ê–î–ê–ß–ê –í–´–ü–û–õ–ù–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        print("   –í—Ä–∞—á —Å –≥–∏–±—Ä–∏–¥–Ω–æ–π –æ–ø–ª–∞—Ç–æ–π —Å–æ–∑–¥–∞–Ω")
    else:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤—Ä–∞—á–∞")
    
    return success

if __name__ == '__main__':
    main()
