import React, { useState, useEffect, useCallback } from 'react';
import CalendarContainer from './components/CalendarContainer';
import { useDragContext } from './context/DragContext';

/**
 * –ì–ª–∞–≤–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–æ–≤–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
 */
const NewCalendar = ({
  appointments = [],
  rooms = [],
  patients = [],
  doctors = [],
  currentDate,
  onDateChange,
  user,
  onSlotClick,
  onEditAppointment,
  onMoveAppointment,
  onNewAppointment,
  canEdit = false
}) => {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è drag & drop
  const [draggedAppointment, setDraggedAppointment] = useState(null);
  const [hoveredSlot, setHoveredSlot] = useState(null);

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ (—Å 9:00 –¥–æ 18:00 —Å —à–∞–≥–æ–º 30 –º–∏–Ω—É—Ç)
  const timeSlots = React.useMemo(() => {
    const slots = [];
    for (let hour = 9; hour < 18; hour++) {
      slots.push(`${hour.toString().padStart(2, '0')}:00`);
      slots.push(`${hour.toString().padStart(2, '0')}:30`);
    }
    return slots;
  }, []);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
  const handleDragStart = useCallback((appointment) => {
    console.log('üöÄ DRAG START:', appointment.id);
    setDraggedAppointment(appointment);
  }, []);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
  const handleDragEnd = useCallback(() => {
    console.log('üèÅ DRAG END');
    setDraggedAppointment(null);
    setHoveredSlot(null);
  }, []);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–µ–¥–µ–Ω–∏—è –Ω–∞ —Å–ª–æ—Ç
  const handleSlotHover = useCallback((roomId, time) => {
    if (draggedAppointment) {
      setHoveredSlot({ roomId, time });
    }
  }, [draggedAppointment]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–æ–∫–∏–¥–∞–Ω–∏—è —Å–ª–æ—Ç–∞
  const handleSlotLeave = useCallback(() => {
    setHoveredSlot(null);
  }, []);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–±—Ä–æ—Å–∞ –Ω–∞ —Å–ª–æ—Ç
  const handleSlotDrop = useCallback(async (roomId, time) => {
    if (!draggedAppointment || !onMoveAppointment) return;

    console.log('üì• DROP:', { appointmentId: draggedAppointment.id, roomId, time });
    
    try {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è - –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –≤—Ä–∞—á –≤ —ç—Ç–æ –≤—Ä–µ–º—è
      const room = rooms.find(r => r.id === roomId);
      if (!room) {
        alert('–ö–∞–±–∏–Ω–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é
      // –ù–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤—Ä–∞—á–∞, –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –∏ —Ç.–¥.

      // –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
      await onMoveAppointment(
        draggedAppointment.id,
        draggedAppointment.doctor_id, // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–∞—á–∞
        currentDate,
        time,
        roomId
      );

      console.log('‚úÖ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏');
    }
  }, [draggedAppointment, onMoveAppointment, rooms, currentDate]);

  return (
    <div className="calendar-container bg-white rounded-lg shadow-lg">
      <CalendarContainer
        rooms={rooms}
        timeSlots={timeSlots}
        appointments={appointments}
        patients={patients}
        doctors={doctors}
        currentDate={currentDate}
        canEdit={canEdit}
        // Drag & Drop props
        draggedAppointment={draggedAppointment}
        hoveredSlot={hoveredSlot}
        onDragStart={handleDragStart}
        onDragEnd={handleDragEnd}
        onSlotHover={handleSlotHover}
        onSlotLeave={handleSlotLeave}
        onSlotDrop={handleSlotDrop}
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        onSlotClick={onSlotClick}
        onEditAppointment={onEditAppointment}
        onNewAppointment={onNewAppointment}
      />
    </div>
  );
};

export default NewCalendar;