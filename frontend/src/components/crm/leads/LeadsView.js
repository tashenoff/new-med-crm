import React, { useState, useEffect } from 'react';
import { useCrm } from '../../../hooks/useCrm';
import Modal from '../../modals/Modal';
import { inputClasses, selectClasses, labelClasses, buttonPrimaryClasses, buttonSecondaryClasses } from '../../modals/modalUtils';

const LeadsView = ({ user }) => {
  const [filteredLeads, setFilteredLeads] = useState([]);
  const [statusFilter, setStatusFilter] = useState('all');
  const [searchTerm, setSearchTerm] = useState('');
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [newLead, setNewLead] = useState({
    first_name: '',
    last_name: '',
    middle_name: '',
    phone: '',
    email: '',
    source: 'website',
    source_id: '',
    priority: 'medium',
    company: '',
    description: '',
    services_interested: []
  });

  const {
    leads,
    managers,
    sources,
    loading,
    error,
    fetchLeads,
    createLead,
    updateLeadStatus,
    convertLead,
    deleteLead,
    fetchAvailableManagers,
    fetchSources,
    clearError
  } = useCrm();

  // –°—Ç–∞—Ç—É—Å—ã –∑–∞—è–≤–æ–∫
  const leadStatuses = {
    new: { label: '–ù–æ–≤–∞—è', color: 'bg-blue-100 text-blue-800', icon: 'üÜï' },
    contacted: { label: '–°–≤—è–∑–∞–ª–∏—Å—å', color: 'bg-yellow-100 text-yellow-800', icon: 'üìû' },
    in_progress: { label: '–í —Ä–∞–±–æ—Ç–µ', color: 'bg-orange-100 text-orange-800', icon: '‚è≥' },
    converted: { label: '–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞', color: 'bg-green-100 text-green-800', icon: '‚úÖ' },
    rejected: { label: '–û—Ç–∫–∞–∑', color: 'bg-red-100 text-red-800', icon: '‚ùå' },
    closed: { label: '–ó–∞–∫—Ä—ã—Ç–∞', color: 'bg-gray-100 text-gray-800', icon: 'üîí' }
  };

  // –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –∑–∞—è–≤–æ–∫
  const leadSources = {
    website: '–°–∞–π—Ç',
    phone: '–¢–µ–ª–µ—Ñ–æ–Ω',
    social: '–°–æ—Ü. —Å–µ—Ç–∏',
    referral: '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è',
    advertising: '–†–µ–∫–ª–∞–º–∞',
    other: '–î—Ä—É–≥–æ–µ'
  };

  useEffect(() => {
    fetchLeads();
    fetchAvailableManagers();
    fetchSources();
  }, []);

  useEffect(() => {
    filterLeads();
  }, [leads, statusFilter, searchTerm]);

  const filterLeads = () => {
    let filtered = leads;
    
    if (statusFilter !== 'all') {
      filtered = filtered.filter(lead => lead.status === statusFilter);
    }
    
    if (searchTerm) {
      filtered = filtered.filter(lead => 
        lead.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
        lead.phone.includes(searchTerm) ||
        lead.email.toLowerCase().includes(searchTerm.toLowerCase())
      );
    }
    
    setFilteredLeads(filtered);
  };

  const handleStatusChange = async (leadId, newStatus) => {
    try {
      await updateLeadStatus(leadId, newStatus);
    } catch (error) {
      console.error('Error updating lead status:', error);
    }
  };

  const handleConvertToClient = async (lead) => {
    try {
      const conversionData = {
        create_hms_patient: false,  // –¢–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç CRM, –±–µ–∑ HMS
        create_appointment: false,
        notes: `–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –∏–∑ –∑–∞—è–≤–∫–∏ ${lead.full_name || lead.first_name + ' ' + lead.last_name}`
      };
      await convertLead(lead.id, conversionData);
      alert('–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ –∫–ª–∏–µ–Ω—Ç–∞ CRM!');
    } catch (error) {
      console.error('Error converting lead:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∑–∞—è–≤–∫–∏: ' + (error.message || error));
    }
  };

  const handleCreateAppointment = async (lead) => {
    try {
      // TODO: Implement appointment creation with HMS integration
      console.log('Creating appointment for lead:', lead);
      alert('–§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞');
    } catch (error) {
      console.error('Error creating appointment:', error);
    }
  };

  const handleCreateLead = async () => {
    try {
      await createLead(newLead);
      setShowCreateModal(false);
      setNewLead({
        first_name: '',
        last_name: '',
        middle_name: '',
        phone: '',
        email: '',
        source: 'website',
        source_id: '',
        priority: 'medium',
        company: '',
        description: '',
        services_interested: []
      });
      alert('–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!');
    } catch (error) {
      console.error('Error creating lead:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏');
    }
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex justify-between items-center">
        <div>
          <h1 className="text-3xl font-bold text-gray-900">üéØ –ó–∞—è–≤–∫–∏</h1>
          <p className="text-gray-600 mt-1">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ö–æ–¥—è—â–∏–º–∏ –∑–∞—è–≤–∫–∞–º–∏</p>
        </div>
        <button
          onClick={() => setShowCreateModal(true)}
          className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors"
        >
          + –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞
        </button>
      </div>

      {/* Filters */}
      <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-4">
        <div className="flex flex-wrap gap-4 items-center">
          <div>
            <label className={labelClasses}>–°—Ç–∞—Ç—É—Å</label>
            <select
              value={statusFilter}
              onChange={(e) => setStatusFilter(e.target.value)}
              className="border border-gray-300 rounded-md px-3 py-2 text-sm"
            >
              <option value="all">–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã</option>
              {Object.entries(leadStatuses).map(([key, status]) => (
                <option key={key} value={key}>{status.label}</option>
              ))}
            </select>
          </div>
          
          <div className="flex-1">
            <label className={labelClasses}>–ü–æ–∏—Å–∫</label>
            <input
              type="text"
              placeholder="–ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏, —Ç–µ–ª–µ—Ñ–æ–Ω—É –∏–ª–∏ email..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className={inputClasses}
            />
          </div>
        </div>
      </div>

      {/* Leads List */}
      <div className="bg-white rounded-lg shadow-sm border border-gray-200">
        {filteredLeads.length === 0 ? (
          <div className="text-center py-8 text-gray-500">
            <p>–ó–∞—è–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
          </div>
        ) : (
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    –ó–∞—è–≤–∫–∞
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    –ö–æ–Ω—Ç–∞–∫—Ç—ã
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    –°—Ç–∞—Ç—É—Å
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    –ú–µ–Ω–µ–¥–∂–µ—Ä
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    –î–µ–π—Å—Ç–≤–∏—è
                  </th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {filteredLeads.map((lead) => (
                  <tr key={lead.id} className="hover:bg-gray-50">
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div>
                        <div className="font-medium text-gray-900">
                          {lead.full_name || `${lead.first_name} ${lead.last_name}`}
                        </div>
                        <div className="text-sm text-gray-500">{lead.description}</div>
                        <div className="text-xs text-gray-400 mt-1">
                          –ò—Å—Ç–æ—á–Ω–∏–∫: {leadSources[lead.source]}
                        </div>
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="text-sm text-gray-900">{lead.phone}</div>
                      <div className="text-sm text-gray-500">{lead.email}</div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <select
                        value={lead.status}
                        onChange={(e) => handleStatusChange(lead.id, e.target.value)}
                        className={`px-2 py-1 text-xs rounded-full font-medium ${leadStatuses[lead.status].color}`}
                      >
                        {Object.entries(leadStatuses).map(([key, status]) => (
                          <option key={key} value={key}>{status.label}</option>
                        ))}
                      </select>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="text-sm text-gray-900">
                        {lead.manager_name || '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                      {new Date(lead.created_at).toLocaleDateString('ru-RU')}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm font-medium space-x-2">
                      <button
                        onClick={() => handleConvertToClient(lead)}
                        className="text-green-600 hover:text-green-900"
                        title="–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –∫–ª–∏–µ–Ω—Ç–∞"
                      >
                        üë•
                      </button>
                      <button
                        onClick={() => handleCreateAppointment(lead)}
                        className="text-blue-600 hover:text-blue-900"
                        title="–°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏–µ–º"
                      >
                        üìÖ
                      </button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}
      </div>

      {/* Create Lead Modal */}
      <Modal 
        show={showCreateModal} 
        onClose={() => setShowCreateModal(false)}
        title="–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞"
        errorMessage={error}
        size="max-w-md"
      >
            
            <div className="space-y-4">
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className={labelClasses}>–ò–º—è *</label>
                  <input
                    type="text"
                    value={newLead.first_name}
                    onChange={(e) => setNewLead({...newLead, first_name: e.target.value})}
                    className={inputClasses}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è"
                  />
                </div>
                <div>
                  <label className={labelClasses}>–§–∞–º–∏–ª–∏—è *</label>
                  <input
                    type="text"
                    value={newLead.last_name}
                    onChange={(e) => setNewLead({...newLead, last_name: e.target.value})}
                    className={inputClasses}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é"
                  />
                </div>
              </div>
              
              <div>
                <label className={labelClasses}>–¢–µ–ª–µ—Ñ–æ–Ω *</label>
                <input
                  type="tel"
                  value={newLead.phone}
                  onChange={(e) => setNewLead({...newLead, phone: e.target.value})}
                  className={inputClasses}
                  placeholder="+7 (___) ___-__-__"
                />
              </div>
              
              <div>
                <label className={labelClasses}>Email</label>
                <input
                  type="email"
                  value={newLead.email}
                  onChange={(e) => setNewLead({...newLead, email: e.target.value})}
                  className={inputClasses}
                  placeholder="example@email.com"
                />
              </div>
              
              <div>
                <label className={labelClasses}>–ò—Å—Ç–æ—á–Ω–∏–∫</label>
                <select
                  value={newLead.source_id || newLead.source}
                  onChange={(e) => {
                    const selectedValue = e.target.value;
                    // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –∏—Å—Ç–æ—á–Ω–∏–∫ –∏–∑ CRM (–µ—Å—Ç—å ID), —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º source_id
                    const selectedSource = sources.find(s => s.id === selectedValue);
                    if (selectedSource) {
                      setNewLead({
                        ...newLead, 
                        source_id: selectedValue,
                        source: selectedSource.type
                      });
                    } else {
                      // –§–æ–ª–±—ç–∫ –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
                      setNewLead({
                        ...newLead, 
                        source: selectedValue,
                        source_id: ''
                      });
                    }
                  }}
                  className={inputClasses}
                >
                  <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫</option>
                  {sources.map((source) => (
                    <option key={source.id} value={source.id}>
                      {source.name} ({source.type})
                    </option>
                  ))}
                  {/* –§–æ–ª–±—ç–∫ –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö */}
                  {sources.length === 0 && Object.entries(leadSources).map(([key, label]) => (
                    <option key={key} value={key}>{label}</option>
                  ))}
                </select>
              </div>
              
              <div>
                <label className={labelClasses}>–û–ø–∏—Å–∞–Ω–∏–µ</label>
                <textarea
                  value={newLead.description}
                  onChange={(e) => setNewLead({...newLead, description: e.target.value})}
                  className={inputClasses}
                  rows="3"
                  placeholder="–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏..."
                />
              </div>
            </div>
            
            <div className="flex justify-end gap-3 mt-6">
              <button
                onClick={() => setShowCreateModal(false)}
                className="px-4 py-2 text-gray-600 hover:text-gray-800 transition-colors"
              >
                –û—Ç–º–µ–Ω–∞
              </button>
              <button
                onClick={handleCreateLead}
                disabled={!newLead.first_name || !newLead.last_name || !newLead.phone}
                className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors"
              >
                –°–æ–∑–¥–∞—Ç—å
              </button>
            </div>
      </Modal>
    </div>
  );
};

export default LeadsView;
