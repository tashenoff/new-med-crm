import React, { useState, useEffect } from 'react';

const ExpensesView = ({ user }) => {
  const [expenses, setExpenses] = useState([]);
  const [showModal, setShowModal] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');

  const [expenseForm, setExpenseForm] = useState({
    description: '',
    amount: '',
    category: 'rent',
    date: new Date().toISOString().split('T')[0],
    notes: ''
  });

  useEffect(() => {
    // TODO: –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö —á–µ—Ä–µ–∑ API
    setExpenses([
      {
        id: 1,
        description: '–ê—Ä–µ–Ω–¥–∞ –ø–æ–º–µ—â–µ–Ω–∏—è',
        amount: 150000,
        category: 'rent',
        date: '2025-09-01',
        notes: '–ú–µ—Å—è—á–Ω–∞—è –∞—Ä–µ–Ω–¥–∞ –∫–ª–∏–Ω–∏–∫–∏'
      },
      {
        id: 2,
        description: '–ó–∞—Ä–ø–ª–∞—Ç–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞',
        amount: 200000,
        category: 'salary',
        date: '2025-09-05',
        notes: '–ó–∞—Ä–ø–ª–∞—Ç–∞ –∑–∞ —Å–µ–Ω—Ç—è–±—Ä—å'
      },
      {
        id: 3,
        description: '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã',
        amount: 45000,
        category: 'materials',
        date: '2025-09-08',
        notes: '–ü–ª–æ–º–±–∏—Ä–æ–≤–æ—á–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã'
      }
    ]);
  }, []);

  const handleSubmit = (e) => {
    e.preventDefault();
    const newExpense = {
      id: expenses.length + 1,
      ...expenseForm,
      amount: parseFloat(expenseForm.amount)
    };
    setExpenses([newExpense, ...expenses]);
    setExpenseForm({
      description: '',
      amount: '',
      category: 'rent',
      date: new Date().toISOString().split('T')[0],
      notes: ''
    });
    setShowModal(false);
  };

  const filteredExpenses = expenses.filter(expense =>
    expense.description.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const totalExpenses = filteredExpenses.reduce((sum, expense) => sum + expense.amount, 0);

  const getCategoryIcon = (category) => {
    switch(category) {
      case 'rent': return 'üè¢';
      case 'salary': return 'üë•';
      case 'materials': return 'üß∞';
      case 'equipment': return 'üîß';
      case 'utilities': return 'üí°';
      case 'marketing': return 'üì¢';
      case 'other': return 'üì¶';
      default: return 'üí≥';
    }
  };

  const getCategoryName = (category) => {
    switch(category) {
      case 'rent': return '–ê—Ä–µ–Ω–¥–∞';
      case 'salary': return '–ó–∞—Ä–ø–ª–∞—Ç–∞';
      case 'materials': return '–ú–∞—Ç–µ—Ä–∏–∞–ª—ã';
      case 'equipment': return '–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ';
      case 'utilities': return '–ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ';
      case 'marketing': return '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥';
      case 'other': return '–ü—Ä–æ—á–µ–µ';
      default: return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }
  };

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex justify-between items-center">
        <h1 className="text-2xl font-bold text-gray-900">üí≥ –†–∞—Å—Ö–æ–¥—ã</h1>
        <button
          onClick={() => setShowModal(true)}
          className="bg-red-600 text-white px-4 py-2 rounded-lg hover:bg-red-700 transition-colors"
        >
          ‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥
        </button>
      </div>

      {/* Filters */}
      <div className="bg-white rounded-lg shadow p-6">
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">–ü–æ–∏—Å–∫</label>
            <input
              type="text"
              placeholder="–ü–æ–∏—Å–∫ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-red-500"
            />
          </div>
          <div></div>
          <div className="flex items-end">
            <div className="bg-red-100 p-3 rounded-lg">
              <p className="text-sm text-red-700">–û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã</p>
              <p className="text-2xl font-bold text-red-800">{totalExpenses.toLocaleString('ru-RU')} ‚Ç∏</p>
            </div>
          </div>
        </div>
      </div>

      {/* Expenses List */}
      <div className="bg-white rounded-lg shadow overflow-hidden">
        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  –û–ø–∏—Å–∞–Ω–∏–µ
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  –ö–∞—Ç–µ–≥–æ—Ä–∏—è
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  –°—É–º–º–∞
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  –î–∞—Ç–∞
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  –î–µ–π—Å—Ç–≤–∏—è
                </th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {filteredExpenses.map((expense) => (
                <tr key={expense.id} className="hover:bg-gray-50">
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="text-sm font-medium text-gray-900">{expense.description}</div>
                    {expense.notes && (
                      <div className="text-sm text-gray-500">{expense.notes}</div>
                    )}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800">
                      {getCategoryIcon(expense.category)} {getCategoryName(expense.category)}
                    </span>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="text-sm font-bold text-red-600">
                      -{expense.amount.toLocaleString('ru-RU')} ‚Ç∏
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                    {new Date(expense.date).toLocaleDateString('ru-RU')}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm font-medium space-x-2">
                    <button className="text-blue-600 hover:text-blue-900">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
                    <button className="text-red-600 hover:text-red-900">–£–¥–∞–ª–∏—Ç—å</button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>

      {/* Add Expense Modal */}
      {showModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 w-full max-w-md mx-4">
            <h3 className="text-lg font-semibold mb-4">‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥</h3>
            
            <form onSubmit={handleSubmit} className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">–û–ø–∏—Å–∞–Ω–∏–µ *</label>
                <input
                  type="text"
                  value={expenseForm.description}
                  onChange={(e) => setExpenseForm({...expenseForm, description: e.target.value})}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-red-500"
                  required
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">–ö–∞—Ç–µ–≥–æ—Ä–∏—è</label>
                <select
                  value={expenseForm.category}
                  onChange={(e) => setExpenseForm({...expenseForm, category: e.target.value})}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-red-500"
                >
                  <option value="rent">–ê—Ä–µ–Ω–¥–∞</option>
                  <option value="salary">–ó–∞—Ä–ø–ª–∞—Ç–∞</option>
                  <option value="materials">–ú–∞—Ç–µ—Ä–∏–∞–ª—ã</option>
                  <option value="equipment">–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ</option>
                  <option value="utilities">–ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ</option>
                  <option value="marketing">–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥</option>
                  <option value="other">–ü—Ä–æ—á–µ–µ</option>
                </select>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">–°—É–º–º–∞ (‚Ç∏) *</label>
                <input
                  type="number"
                  min="0"
                  step="0.01"
                  value={expenseForm.amount}
                  onChange={(e) => setExpenseForm({...expenseForm, amount: e.target.value})}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-red-500"
                  required
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">–î–∞—Ç–∞ *</label>
                <input
                  type="date"
                  value={expenseForm.date}
                  onChange={(e) => setExpenseForm({...expenseForm, date: e.target.value})}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-red-500"
                  required
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">–ü—Ä–∏–º–µ—á–∞–Ω–∏—è</label>
                <textarea
                  value={expenseForm.notes}
                  onChange={(e) => setExpenseForm({...expenseForm, notes: e.target.value})}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-red-500"
                  rows="3"
                />
              </div>

              <div className="flex space-x-3">
                <button
                  type="submit"
                  className="flex-1 bg-red-600 text-white py-2 rounded-lg hover:bg-red-700"
                >
                  –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                </button>
                <button
                  type="button"
                  onClick={() => setShowModal(false)}
                  className="flex-1 bg-gray-300 text-gray-700 py-2 rounded-lg hover:bg-gray-400"
                >
                  –û—Ç–º–µ–Ω–∞
                </button>
              </div>
            </form>
          </div>
        </div>
      )}
    </div>
  );
};

export default ExpensesView;