import React, { useState } from 'react';

const ScheduleView = ({ 
  appointments, 
  doctors, 
  patients, 
  user, 
  onNewAppointment, 
  onEditAppointment, 
  onDeleteAppointment,
  onStatusChange,
  canEdit 
}) => {
  const [draggedAppointment, setDraggedAppointment] = useState(null);

  const getScheduleAppointments = () => {
    const today = new Date();
    const sevenDaysAgo = new Date(today);
    sevenDaysAgo.setDate(today.getDate() - 7);
    const sevenDaysFromNow = new Date(today);
    sevenDaysFromNow.setDate(today.getDate() + 7);
    
    const fromDate = sevenDaysAgo.toISOString().split('T')[0];
    const toDate = sevenDaysFromNow.toISOString().split('T')[0];
    
    return appointments.filter(apt => 
      apt.appointment_date >= fromDate && apt.appointment_date <= toDate
    ).sort((a, b) => {
      if (a.appointment_date !== b.appointment_date) {
        return a.appointment_date.localeCompare(b.appointment_date);
      }
      return a.appointment_time.localeCompare(b.appointment_time);
    });
  };

  const scheduleAppointments = getScheduleAppointments();

  // –ö–∞–Ω–±–∞–Ω –∫–æ–ª–æ–Ω–∫–∏ —Å —Å—Ç–∞—Ç—É—Å–∞–º–∏
  const kanbanColumns = [
    {
      id: 'unconfirmed',
      title: '–ù–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ',
      color: 'bg-yellow-50 border-yellow-200',
      headerColor: 'bg-yellow-100 text-yellow-800'
    },
    {
      id: 'confirmed',
      title: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ',
      color: 'bg-blue-50 border-blue-200',
      headerColor: 'bg-blue-100 text-blue-800'
    },
    {
      id: 'arrived',
      title: '–ü–∞—Ü–∏–µ–Ω—Ç –ø—Ä–∏—à–µ–ª',
      color: 'bg-purple-50 border-purple-200',
      headerColor: 'bg-purple-100 text-purple-800'
    },
    {
      id: 'in_progress',
      title: '–ù–∞ –ø—Ä–∏–µ–º–µ',
      color: 'bg-orange-50 border-orange-200',
      headerColor: 'bg-orange-100 text-orange-800'
    },
    {
      id: 'completed',
      title: '–ó–∞–≤–µ—Ä—à–µ–Ω–æ',
      color: 'bg-green-50 border-green-200',
      headerColor: 'bg-green-100 text-green-800'
    },
    {
      id: 'cancelled',
      title: '–û—Ç–º–µ–Ω–µ–Ω–æ',
      color: 'bg-red-50 border-red-200',
      headerColor: 'bg-red-100 text-red-800'
    },
    {
      id: 'no_show',
      title: '–ù–µ —è–≤–∏–ª—Å—è',
      color: 'bg-gray-50 border-gray-200',
      headerColor: 'bg-gray-100 text-gray-800'
    }
  ];

  const getStatusColor = (status) => {
    switch (status) {
      case 'unconfirmed': return 'bg-yellow-100 text-yellow-800 border-yellow-300';
      case 'confirmed': return 'bg-blue-100 text-blue-800 border-blue-300';
      case 'arrived': return 'bg-purple-100 text-purple-800 border-purple-300';
      case 'in_progress': return 'bg-orange-100 text-orange-800 border-orange-300';
      case 'completed': return 'bg-green-100 text-green-800 border-green-300';
      case 'cancelled': return 'bg-red-100 text-red-800 border-red-300';
      case 'no_show': return 'bg-gray-100 text-gray-800 border-gray-300';
      default: return 'bg-gray-100 text-gray-800 border-gray-300';
    }
  };

  const getStatusText = (status) => {
    switch (status) {
      case 'unconfirmed': return '–ù–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω';
      case 'confirmed': return '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω';
      case 'arrived': return '–ü–∞—Ü–∏–µ–Ω—Ç –ø—Ä–∏—à–µ–ª';
      case 'in_progress': return '–í –ø—Ä–æ—Ü–µ—Å—Å–µ';
      case 'completed': return '–ó–∞–≤–µ—Ä—à–µ–Ω';
      case 'cancelled': return '–û—Ç–º–µ–Ω–µ–Ω';
      case 'no_show': return '–ù–µ —è–≤–∏–ª—Å—è';
      default: return '–ù–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω';
    }
  };

  // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –≤—Å—Ç—Ä–µ—á –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
  const getAppointmentsByStatus = (status) => {
    return scheduleAppointments.filter(apt => apt.status === status);
  };

  // Drag & Drop —Ñ—É–Ω–∫—Ü–∏–∏
  const handleDragStart = (e, appointment) => {
    if (!canEdit) return;
    setDraggedAppointment(appointment);
    e.dataTransfer.effectAllowed = 'move';
  };

  const handleDragOver = (e) => {
    e.preventDefault();
    e.dataTransfer.dropEffect = 'move';
  };

  const handleDrop = (e, newStatus) => {
    e.preventDefault();
    if (!canEdit || !draggedAppointment) return;
    
    if (draggedAppointment.status !== newStatus) {
      onStatusChange(draggedAppointment.id, newStatus);
    }
    setDraggedAppointment(null);
  };

  const handleDragEnd = () => {
    setDraggedAppointment(null);
  };

  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –≤—Å—Ç—Ä–µ—á–∏
  const AppointmentCard = ({ appointment }) => (
    <div
      draggable={canEdit}
      onDragStart={(e) => handleDragStart(e, appointment)}
      onDragEnd={handleDragEnd}
      className={`bg-white p-4 rounded-lg shadow-sm border-l-4 mb-3 cursor-pointer hover:shadow-md transition-all duration-200 ${
        draggedAppointment?.id === appointment.id ? 'opacity-50 transform rotate-2' : ''
      } ${getStatusColor(appointment.status).replace('bg-', 'border-').replace('text-', '').replace('100', '400')}`}
    >
      <div className="flex justify-between items-start">
        <div className="flex-1 min-w-0">
          {/* –ò–º—è –ø–∞—Ü–∏–µ–Ω—Ç–∞ */}
          <div className="font-semibold text-lg truncate">
            {appointment.patient_name}
          </div>
          
          {/* –í—Ä–∞—á */}
          <div className="text-gray-600 text-sm">
            üë®‚Äç‚öïÔ∏è {appointment.doctor_name} ({appointment.doctor_specialty})
          </div>
          
          {/* –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è */}
          <div className="text-gray-600 text-sm flex items-center mt-1">
            üìÖ {appointment.appointment_date} –≤ {appointment.appointment_time}
            {appointment.end_time && ` - ${appointment.end_time}`}
          </div>
          
          {/* –ö—Ä–µ—Å–ª–æ */}
          {appointment.chair_number && (
            <div className="text-gray-600 text-sm">
              ü™ë –ö—Ä–µ—Å–ª–æ: {appointment.chair_number}
            </div>
          )}
          
          {/* –¶–µ–Ω–∞ */}
          {appointment.price && (
            <div className="text-green-600 font-medium text-sm">
              üí∞ {appointment.price} ‚Ç∏
            </div>
          )}
          
          {/* –ü—Ä–∏—á–∏–Ω–∞ */}
          {appointment.reason && (
            <div className="text-gray-600 text-sm mt-1 truncate">
              üìù {appointment.reason}
            </div>
          )}
          
          {/* –ó–∞–º–µ—Ç–∫–∏ */}
          {appointment.notes && (
            <div className="text-gray-500 text-xs mt-1 truncate">
              üí≠ {appointment.notes}
            </div>
          )}
          
          {/* –ó–∞–º–µ—Ç–∫–∏ –æ –ø–∞—Ü–∏–µ–Ω—Ç–µ */}
          {appointment.patient_notes && (
            <div className="text-gray-500 text-xs mt-1 truncate">
              üë§ {appointment.patient_notes}
            </div>
          )}
        </div>
        
        {/* –î–µ–π—Å—Ç–≤–∏—è */}
        {canEdit && (
          <div className="flex flex-col space-y-1 ml-2">
            <button
              onClick={() => onEditAppointment(appointment)}
              className="text-blue-600 hover:text-blue-800 p-1 rounded hover:bg-blue-50"
              title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
            >
              ‚úèÔ∏è
            </button>
            
            <button
              onClick={() => onDeleteAppointment(appointment.id)}
              className="text-red-600 hover:text-red-800 p-1 rounded hover:bg-red-50"
              title="–£–¥–∞–ª–∏—Ç—å"
            >
              üóëÔ∏è
            </button>
          </div>
        )}
      </div>
      
      {/* –°—Ç–∞—Ç—É—Å –±–µ–π–¥–∂ */}
      <div className="mt-2">
        <span className={`px-2 py-1 text-xs rounded-full font-medium ${getStatusColor(appointment.status)}`}>
          {getStatusText(appointment.status)}
        </span>
      </div>
    </div>
  );
    <div>
      <div className="flex justify-between items-center mb-6">
        <h2 className="text-2xl font-bold">–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ (¬±7 –¥–Ω–µ–π)</h2>
        {canEdit && (
          <button
            onClick={onNewAppointment}
            className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors"
          >
            + –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å
          </button>
        )}
      </div>

      {scheduleAppointments.length === 0 ? (
        <div className="text-center py-8 text-gray-500">
          <p>–ó–∞–ø–∏—Å–µ–π –Ω–∞ –ø—Ä–∏–µ–º –Ω–µ—Ç</p>
        </div>
      ) : (
        <div className="grid gap-4">
          {scheduleAppointments.map(appointment => (
            <div key={appointment.id} className="bg-white p-6 rounded-lg shadow border-l-4 border-blue-500">
              <div className="flex justify-between items-start">
                <div className="flex-1">
                  <div className="font-semibold text-lg">
                    {appointment.patient_name}
                  </div>
                  <div className="text-gray-600 mt-1">
                    –í—Ä–∞—á: {appointment.doctor_name} ({appointment.doctor_specialty})
                  </div>
                  <div className="text-gray-600">
                    üìÖ {appointment.appointment_date} –≤ {appointment.appointment_time}
                    {appointment.end_time && ` - ${appointment.end_time}`}
                  </div>
                  {appointment.chair_number && (
                    <div className="text-gray-600">
                      ü™ë –ö—Ä–µ—Å–ª–æ: {appointment.chair_number}
                    </div>
                  )}
                  {appointment.price && (
                    <div className="text-green-600 font-medium">
                      üí∞ –¶–µ–Ω–∞: {appointment.price} ‚Ç∏
                    </div>
                  )}
                  {appointment.reason && (
                    <div className="text-gray-600">
                      –ü—Ä–∏—á–∏–Ω–∞: {appointment.reason}
                    </div>
                  )}
                  {appointment.notes && (
                    <div className="text-gray-600">
                      –ó–∞–º–µ—Ç–∫–∏: {appointment.notes}
                    </div>
                  )}
                  {appointment.patient_notes && (
                    <div className="text-gray-600">
                      –ó–∞–º–µ—Ç–∫–∏ –æ –ø–∞—Ü–∏–µ–Ω—Ç–µ: {appointment.patient_notes}
                    </div>
                  )}
                </div>
                
                <div className="flex flex-col items-end space-y-2">
                  <span className={`px-2 py-1 text-xs rounded font-medium ${getStatusColor(appointment.status)}`}>
                    {getStatusText(appointment.status)}
                  </span>
                  
                  {canEdit && (
                    <div className="flex space-x-2">
                      <select
                        value={appointment.status}
                        onChange={(e) => onStatusChange(appointment.id, e.target.value)}
                        className="text-xs border rounded px-2 py-1"
                      >
                        <option value="pending">–ù–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω</option>
                        <option value="confirmed">–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω</option>
                        <option value="in_progress">–í –ø—Ä–æ—Ü–µ—Å—Å–µ</option>
                        <option value="completed">–ó–∞–≤–µ—Ä—à–µ–Ω</option>
                        <option value="cancelled">–û—Ç–º–µ–Ω–µ–Ω</option>
                      </select>
                      
                      <button
                        onClick={() => onEditAppointment(appointment)}
                        className="text-blue-600 hover:text-blue-800 text-sm"
                      >
                        ‚úèÔ∏è
                      </button>
                      
                      <button
                        onClick={() => onDeleteAppointment(appointment.id)}
                        className="text-red-600 hover:text-red-800 text-sm"
                      >
                        üóëÔ∏è
                      </button>
                    </div>
                  )}
                </div>
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
  );

  return (
    <div className="h-full">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="flex justify-between items-center mb-6">
        <h2 className="text-2xl font-bold">–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ - –ö–∞–Ω–±–∞–Ω (¬±7 –¥–Ω–µ–π)</h2>
        {canEdit && (
          <button
            onClick={onNewAppointment}
            className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors"
          >
            + –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å
          </button>
        )}
      </div>

      {scheduleAppointments.length === 0 ? (
        <div className="text-center py-8 text-gray-500">
          <p>–ó–∞–ø–∏—Å–µ–π –Ω–∞ –ø—Ä–∏–µ–º –Ω–µ—Ç</p>
        </div>
      ) : (
        <div className="flex gap-4 overflow-x-auto pb-4" style={{ minHeight: '70vh' }}>
          {kanbanColumns.map(column => {
            const columnAppointments = getAppointmentsByStatus(column.id);
            
            return (
              <div
                key={column.id}
                className={`flex-shrink-0 w-80 ${column.color} border rounded-lg`}
                onDragOver={handleDragOver}
                onDrop={(e) => handleDrop(e, column.id)}
              >
                {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–æ–ª–æ–Ω–∫–∏ */}
                <div className={`${column.headerColor} p-4 rounded-t-lg border-b`}>
                  <div className="flex justify-between items-center">
                    <h3 className="font-semibold text-lg">{column.title}</h3>
                    <span className="bg-white bg-opacity-50 text-sm px-2 py-1 rounded-full">
                      {columnAppointments.length}
                    </span>
                  </div>
                </div>
                
                {/* –ö–∞—Ä—Ç–æ—á–∫–∏ –≤—Å—Ç—Ä–µ—á */}
                <div className="p-4 space-y-3 min-h-96">
                  {columnAppointments.map(appointment => (
                    <AppointmentCard 
                      key={appointment.id} 
                      appointment={appointment} 
                    />
                  ))}
                  
                  {/* –ü—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ */}
                  {columnAppointments.length === 0 && (
                    <div className="text-center py-8 text-gray-400">
                      <div className="text-4xl mb-2">üìã</div>
                      <p className="text-sm">–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π</p>
                      {canEdit && (
                        <p className="text-xs mt-1">–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Å—é–¥–∞ –¥–ª—è —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞</p>
                      )}
                    </div>
                  )}
                </div>
              </div>
            );
          })}
        </div>
      )}
    </div>
  );
};

export default ScheduleView;