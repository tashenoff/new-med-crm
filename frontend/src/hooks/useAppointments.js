import { useState, useCallback } from 'react';
import axios from 'axios';

const BACKEND_URL = import.meta.env.VITE_BACKEND_URL;
const API = `${BACKEND_URL}/api`;

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–∏
const cleanAppointmentData = (appointmentData) => {
  const cleanData = { ...appointmentData };
  delete cleanData.chair_number; // –£–¥–∞–ª–µ–Ω–æ –ø–æ–ª–µ chair_number
  
  // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º price –≤ —á–∏—Å–ª–æ –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ –ø—É—Å—Ç–æ–µ
  if (cleanData.price !== undefined && cleanData.price !== '') {
    cleanData.price = parseFloat(cleanData.price) || 0;
  } else {
    cleanData.price = 0;
  }
  
  return cleanData;
};

export const useAppointments = () => {
  const [appointments, setAppointments] = useState([]);
  const [loading, setLoading] = useState(false);

  // –ü—Ä–æ—Å—Ç–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è setAppointments
  const setAppointmentsWithLog = (newAppointments) => {
    console.log(`üìä APPOINTMENTS UPDATE: ${appointments.length} -> ${newAppointments.length} –∑–∞–ø–∏—Å–µ–π`);
    setAppointments(newAppointments);
  };

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏
  const fetchAppointments = useCallback(async () => {
    setLoading(true);
    try {
      console.log('üîÑ useAppointments: fetchAppointments - –∑–∞–≥—Ä—É–∂–∞–µ–º —Å —Å–µ—Ä–≤–µ—Ä–∞');
      const response = await axios.get(`${API}/appointments`);
      console.log('üîÑ useAppointments: fetchAppointments - –ø–æ–ª—É—á–∏–ª–∏', response.data.length, '–∑–∞–ø–∏—Å–µ–π');
      console.log('üîÑ useAppointments: –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—à—É –∑–∞–ø–∏—Å—å –≤ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', response.data.find(apt => (apt._id || apt.id) === '6cbc8990-5333-4a09-8de7-da6ea02e3710')?.room_id);
      setAppointmentsWithLog(response.data);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–ø–∏—Å–µ–π:', error);
      throw error;
    } finally {
      setLoading(false);
    }
  }, []);

  // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
  const createAppointment = useCallback(async (appointmentData) => {
    try {
      const cleanData = cleanAppointmentData(appointmentData);
      
      const response = await axios.post(`${API}/appointments`, cleanData);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
      setAppointments(prev => [...prev, response.data]);
      
      return { success: true, data: response.data };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏:', error);
      let errorMessage = '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏';
      
      if (error.response?.data?.detail) {
        // –ï—Å–ª–∏ detail - —ç—Ç–æ –º–∞—Å—Å–∏–≤ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        if (Array.isArray(error.response.data.detail)) {
          errorMessage = error.response.data.detail.map(err => 
            `${err.loc ? err.loc.join('.') + ': ' : ''}${err.msg}`
          ).join(', ');
        } else if (typeof error.response.data.detail === 'string') {
          errorMessage = error.response.data.detail;
        } else {
          errorMessage = JSON.stringify(error.response.data.detail);
        }
      } else if (error.message) {
        errorMessage = error.message;
      }
      
      return { success: false, error: errorMessage };
    }
  }, []);

  // –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å
  const updateAppointment = useCallback(async (id, appointmentData) => {
    try {
      const cleanData = cleanAppointmentData(appointmentData);
      const response = await axios.put(`${API}/appointments/${id}`, cleanData);
      
      // –ù–ï –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –ø—É—Å—Ç—å –≤—ã–∑—ã–≤–∞—é—â–∏–π –∫–æ–¥ –¥–µ–ª–∞–µ—Ç fetchAppointments()
      
      return { success: true, data: response.data };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏:', error);
      const errorMessage = error.response?.data?.detail || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏';
      return { success: false, error: errorMessage };
    }
  }, []);

  // –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å
  const deleteAppointment = useCallback(async (id) => {
    try {
      await axios.delete(`${API}/appointments/${id}`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
      setAppointments(prev => prev.filter(appointment => appointment._id !== id));
      
      return { success: true };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏:', error);
      const errorMessage = error.response?.data?.detail || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏';
      return { success: false, error: errorMessage };
    }
  }, []);

  // –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å–∏
  const updateAppointmentStatus = useCallback(async (id, status) => {
    try {
      const response = await axios.patch(`${API}/appointments/${id}/status`, { status });
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
      setAppointments(prev => 
        prev.map(appointment => 
          appointment._id === id ? { ...appointment, status } : appointment
        )
      );
      
      return { success: true, data: response.data };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø–∏—Å–∏:', error);
      const errorMessage = error.response?.data?.detail || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞';
      return { success: false, error: errorMessage };
    }
  }, []);

  // –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –∑–∞–ø–∏—Å—å (drag & drop)
  const moveAppointment = useCallback(async (id, newDate, newTime, newRoomId) => {
    console.log(`üöÄ MOVE APPOINTMENT: id=${id}, date=${newDate}, time=${newTime}, roomId=${newRoomId}`);
    try {
      const updateData = {
        appointment_date: newDate,
        appointment_time: newTime,
        room_id: newRoomId
      };
      
      console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PUT –∑–∞–ø—Ä–æ—Å:`, updateData);
      const response = await axios.put(`${API}/appointments/${id}`, updateData);
      console.log(`‚úÖ PUT –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω:`, response.data);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
      setAppointments(prev => 
        prev.map(appointment => {
          const appointmentId = appointment._id || appointment.id;
          return String(appointmentId) === String(id) ? response.data : appointment;
        })
      );
      
      return { success: true, data: response.data };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏:', error);
      const errorMessage = error.response?.data?.detail || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏';
      return { success: false, error: errorMessage };
    }
  }, []);

  return {
    appointments,
    loading,
    fetchAppointments,
    createAppointment,
    updateAppointment,
    deleteAppointment,
    updateAppointmentStatus,
    moveAppointment
  };
};
