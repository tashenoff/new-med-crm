import { useState, useCallback, useEffect } from 'react';
import { useCrmApi } from './useCrmApi';

/**
 * –•—É–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–ª–∞–Ω–æ–≤ –ª–µ—á–µ–Ω–∏—è –º–µ–∂–¥—É HMS –∏ CRM
 */
export const useTreatmentPlanSync = () => {
  const [treatmentPlansData, setTreatmentPlansData] = useState({});
  const [syncingClients, setSyncingClients] = useState(new Set());
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  
  const crmApi = useCrmApi();

  // –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞–Ω–∞—Ö –ª–µ—á–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
  const getClientTreatmentPlans = useCallback(async (clientId) => {
    // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —É–∂–µ –µ—Å—Ç—å –≤ –∫–µ—à–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Ö
    if (treatmentPlansData[clientId]) {
      return treatmentPlansData[clientId];
    }

    // –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —É–∂–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç—Å—è, –æ–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    if (syncingClients.has(clientId)) {
      return null;
    }

    try {
      setSyncingClients(prev => new Set([...prev, clientId]));
      
      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—ã—Ä—É—á–∫—É –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ HMS (—ç—Ç–æ –≤–∫–ª—é—á–∞–µ—Ç –ø–ª–∞–Ω—ã –ª–µ—á–µ–Ω–∏—è)
      const revenueData = await crmApi.integration.getClientRevenueFromHMS(clientId);
      
      const planData = {
        totalAmount: revenueData.total_amount || 0,
        paidAmount: revenueData.paid_amount || 0,
        pendingAmount: revenueData.pending_amount || 0,
        treatmentPlansCount: revenueData.treatment_plans_count || 0,
        plans: revenueData.plans || [],
        lastUpdate: new Date().toISOString()
      };

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
      setTreatmentPlansData(prev => ({
        ...prev,
        [clientId]: planData
      }));

      return planData;
    } catch (error) {
      console.error(`Error fetching treatment plans for client ${clientId}:`, error);
      // –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ HMS, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ
      const emptyData = {
        totalAmount: 0,
        paidAmount: 0,
        pendingAmount: 0,
        treatmentPlansCount: 0,
        plans: [],
        lastUpdate: new Date().toISOString()
      };
      
      setTreatmentPlansData(prev => ({
        ...prev,
        [clientId]: emptyData
      }));
      
      return emptyData;
    } finally {
      setSyncingClients(prev => {
        const newSet = new Set(prev);
        newSet.delete(clientId);
        return newSet;
      });
    }
  }, [crmApi.integration, treatmentPlansData, syncingClients]);

  // –ú–∞—Å—Å–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–æ–≤ –ª–µ—á–µ–Ω–∏—è –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤
  const syncMultipleClients = useCallback(async (clients) => {
    setLoading(true);
    setError(null);
    
    try {
      console.log(`üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –ø–ª–∞–Ω–æ–≤ –ª–µ—á–µ–Ω–∏—è –¥–ª—è ${clients.length} –∫–ª–∏–µ–Ω—Ç–æ–≤`);
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ HMS –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤
      const hmsClients = clients.filter(client => client.is_hms_patient);
      
      if (hmsClients.length === 0) {
        console.log('‚ÑπÔ∏è –ù–µ—Ç HMS –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
        return;
      }

      console.log(`üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º ${hmsClients.length} HMS –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤`);

      // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ (–Ω–æ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º)
      const batchSize = 5; // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
      const results = {};

      for (let i = 0; i < hmsClients.length; i += batchSize) {
        const batch = hmsClients.slice(i, i + batchSize);
        const batchPromises = batch.map(async (client) => {
          try {
            const planData = await getClientTreatmentPlans(client.id);
            return { clientId: client.id, data: planData };
          } catch (error) {
            console.error(`Error syncing client ${client.id}:`, error);
            return { clientId: client.id, data: null };
          }
        });

        const batchResults = await Promise.all(batchPromises);
        batchResults.forEach(({ clientId, data }) => {
          if (data) {
            results[clientId] = data;
          }
        });

        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
        if (i + batchSize < hmsClients.length) {
          await new Promise(resolve => setTimeout(resolve, 100));
        }
      }

      console.log(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è ${Object.keys(results).length} –∫–ª–∏–µ–Ω—Ç–æ–≤`);
      
    } catch (error) {
      console.error('Error during bulk sync:', error);
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–ª–∞–Ω–æ–≤ –ª–µ—á–µ–Ω–∏—è');
    } finally {
      setLoading(false);
    }
  }, [getClientTreatmentPlans]);

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –ø–ª–∞–Ω–æ–≤ –ª–µ—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ HMS API
  const forceSyncAllTreatmentPlans = useCallback(async () => {
    setLoading(true);
    setError(null);
    
    try {
      console.log('üîÑ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤—Å–µ—Ö –ø–ª–∞–Ω–æ–≤ –ª–µ—á–µ–Ω–∏—è');
      const result = await crmApi.integration.syncAllTreatmentPlans();
      
      // –û—á–∏—â–∞–µ–º –∫–µ—à, —á—Ç–æ–±—ã –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—Ä–æ—Å–µ –ø–æ–ª—É—á–∏—Ç—å —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
      setTreatmentPlansData({});
      
      console.log('‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:', result);
      return result;
    } catch (error) {
      console.error('Error during force sync:', error);
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
      throw error;
    } finally {
      setLoading(false);
    }
  }, [crmApi.integration]);

  // –û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
  const clearClientCache = useCallback((clientId) => {
    setTreatmentPlansData(prev => {
      const newData = { ...prev };
      delete newData[clientId];
      return newData;
    });
  }, []);

  // –û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –∫–µ—à
  const clearAllCache = useCallback(() => {
    setTreatmentPlansData({});
  }, []);

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  const getSyncStats = useCallback(() => {
    const cachedClientsCount = Object.keys(treatmentPlansData).length;
    const syncingCount = syncingClients.size;
    
    return {
      cachedClientsCount,
      syncingCount,
      isLoading: loading || syncingCount > 0
    };
  }, [treatmentPlansData, syncingClients, loading]);

  return {
    // –î–∞–Ω–Ω—ã–µ
    treatmentPlansData,
    loading,
    error,
    
    // –§—É–Ω–∫—Ü–∏–∏
    getClientTreatmentPlans,
    syncMultipleClients,
    forceSyncAllTreatmentPlans,
    clearClientCache,
    clearAllCache,
    getSyncStats,
    
    // –°—Ç–∞—Ç—É—Å
    syncingClients,
    isClientSyncing: (clientId) => syncingClients.has(clientId)
  };
};
