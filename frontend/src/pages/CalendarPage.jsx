import React, { useState, useEffect, useRef } from 'react';
import { useAppointments } from '../hooks/useAppointments';
import { usePatients } from '../hooks/usePatients';
import { useDoctors } from '../hooks/useDoctors';
import { useRooms } from '../hooks/useRooms';
import { useGlobalRefresh } from '../hooks/useGlobalRefresh';
import { useModal } from '../context/ModalContext';
import CalendarView from '../components/calendar/CalendarView';

const CalendarPage = ({ user }) => {
  // Data hooks
  const appointmentsHook = useAppointments();
  const patientsHook = usePatients();
  const doctorsHook = useDoctors();
  const roomsHook = useRooms();
  const { refreshTriggers } = useGlobalRefresh();
  
  // Calendar state
  const [currentDate, setCurrentDate] = useState(new Date());
  
  // Modal hook
  const { openModal, closeModal, updateModalProps, getModalProps } = useModal();

  // UI —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const [pendingAppointment, setPendingAppointment] = useState(null);
  const [loading, setLoading] = useState(false);
  const [errorMessage, setErrorMessage] = useState(null);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ—Ä–º—ã –∑–∞–ø–∏—Å–∏
  const [currentAppointmentForm, setCurrentAppointmentForm] = useState({});
  const [currentEditingItem, setCurrentEditingItem] = useState(null);
  
  // Ref –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–π —Ñ–æ—Ä–º—ã (—Ä–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å React batching)
  const appointmentFormRef = useRef({});
  const editingItemRef = useRef(null);

  // –§–æ—Ä–º–∞ –∑–∞–ø–∏—Å–∏ —Ç–µ–ø–µ—Ä—å —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ ModalContext

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    appointmentsHook.fetchAppointments();
    patientsHook.fetchPatients();
    doctorsHook.fetchDoctors();
    roomsHook.fetchRooms();
  }, [appointmentsHook.fetchAppointments, patientsHook.fetchPatients, doctorsHook.fetchDoctors, roomsHook.fetchRooms]);


  // –°–ª—É—à–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (–æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è drag & drop)
  // useEffect(() => {
  //   console.log('üîÑ –ü–æ–ª—É—á–µ–Ω —Ç—Ä–∏–≥–≥–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫');
  //   appointmentsHook.fetchAppointments();
  // }, [refreshTriggers.appointments, appointmentsHook.fetchAppointments]);

  useEffect(() => {
    patientsHook.fetchPatients();
  }, [refreshTriggers.patients, patientsHook.fetchPatients]);

  useEffect(() => {
    doctorsHook.fetchDoctors();
  }, [refreshTriggers.doctors, doctorsHook.fetchDoctors]);


  useEffect(() => {
    roomsHook.fetchRooms();
  }, [refreshTriggers.rooms, roomsHook.fetchRooms]);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ –æ—à–∏–±–æ–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
  useEffect(() => {
    if (errorMessage) {
      const timer = setTimeout(() => setErrorMessage(null), 5000);
      return () => clearTimeout(timer);
    }
  }, [errorMessage]);

  // –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–∏
  const doTimesOverlapSimple = (start1, end1, start2, end2) => {
    if (!end1 || !end2) return false;
    
    const parseTime = (timeStr) => {
      const [hours, minutes] = timeStr.split(':').map(Number);
      return hours * 60 + minutes;
    };
    
    const start1Minutes = parseTime(start1);
    const end1Minutes = parseTime(end1);
    const start2Minutes = parseTime(start2);
    const end2Minutes = parseTime(end2);
    
    return start1Minutes < end2Minutes && end1Minutes > start2Minutes;
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–ø–∏—Å–µ–π
  const handleNewAppointment = () => {
    openModal('appointment', {
      appointmentForm: {
        patient_id: '',
        doctor_id: '',
        appointment_date: '',
        appointment_time: '',
        end_time: '',
        price: '',
        status: 'unconfirmed',
        reason: '',
        notes: '',
        patient_notes: '',
        room_id: ''
      },
      setAppointmentForm: (form) => updateModalProps('appointment', { appointmentForm: form }),
      patients: patientsHook.patients,
      doctors: doctorsHook.doctors,
      editingItem: null,
      loading,
      errorMessage,
      onSave: handleSaveAppointment,
      onCreatePatient: handleCreatePatientFromAppointment,
      appointments: appointmentsHook.appointments
    });
  };

  const handleSlotClick = (date, time, roomId = null) => {
    
    const appointmentForm = {
      patient_id: '',
      doctor_id: '',
      appointment_date: date,
      appointment_time: time,
      end_time: '',
      price: '',
      status: 'unconfirmed',
      reason: '',
      notes: '',
      patient_notes: '',
      room_id: roomId || ''
    };
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏ ref
    setCurrentAppointmentForm(appointmentForm);
    setCurrentEditingItem(null);
    appointmentFormRef.current = appointmentForm;
    editingItemRef.current = null;
    
    const modalProps = {
      appointmentForm,
      setAppointmentForm: (form) => {
        console.log('üî• DEBUG: setAppointmentForm –≤—ã–∑–≤–∞–Ω —Å:', form);
        console.log('üî• DEBUG: form.patient_id:', form.patient_id);
        appointmentFormRef.current = form; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ ref –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
        setCurrentAppointmentForm(form);
        updateModalProps('appointment', { appointmentForm: form });
      },
      patients: patientsHook.patients,
      doctors: doctorsHook.doctors,
      editingItem: null,
      loading,
      errorMessage,
      onSave: handleSaveAppointment,
      onCreatePatient: handleCreatePatientFromAppointment,
      appointments: appointmentsHook.appointments
    };
    
    openModal('appointment', modalProps);
  };

  const handleEditAppointment = (appointment) => {
    const appointmentForm = {
      patient_id: appointment.patient_id,
      doctor_id: appointment.doctor_id,
      room_id: appointment.room_id || '',
      appointment_date: appointment.appointment_date,
      appointment_time: appointment.appointment_time,
      end_time: appointment.end_time || '',
      price: appointment.price || '',
      status: appointment.status || 'unconfirmed',
      reason: appointment.reason || '',
      notes: appointment.notes || '',
      patient_notes: appointment.patient_notes || ''
    };
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏ ref
    setCurrentAppointmentForm(appointmentForm);
    setCurrentEditingItem(appointment);
    appointmentFormRef.current = appointmentForm;
    editingItemRef.current = appointment;
    
    const modalProps = {
      appointmentForm,
      setAppointmentForm: (form) => {
        console.log('üî• DEBUG: setAppointmentForm (edit) –≤—ã–∑–≤–∞–Ω —Å:', form);
        appointmentFormRef.current = form; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ ref –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
        setCurrentAppointmentForm(form);
        updateModalProps('appointment', { appointmentForm: form });
      },
      patients: patientsHook.patients,
      doctors: doctorsHook.doctors,
      editingItem: appointment,
      loading,
      errorMessage,
      onSave: handleSaveAppointment,
      onCreatePatient: handleCreatePatientFromAppointment,
      appointments: appointmentsHook.appointments
    };
    
    openModal('appointment', modalProps);
  };

  const handleSaveAppointment = async (e) => {
    e.preventDefault();
    setLoading(true);
    setErrorMessage(null);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º ref –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const appointmentForm = appointmentFormRef.current;
    const editingItem = editingItemRef.current;
    
    console.log('üî• DEBUG: appointmentFormRef.current:', appointmentForm);
    console.log('üî• DEBUG: patient_id:', appointmentForm.patient_id);
    
    try {
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
      if (!appointmentForm.patient_id) {
        alert('–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞!');
        setLoading(false);
        return;
      }
      if (!appointmentForm.doctor_id) {
        alert('–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–∞—á–∞!');
        setLoading(false);
        return;
      }
      if (!appointmentForm.appointment_date) {
        alert('–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É!');
        setLoading(false);
        return;
      }
      if (!appointmentForm.appointment_time) {
        alert('–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è!');
        setLoading(false);
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –≤—Ä–µ–º–µ–Ω–∏ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
      if (!editingItem) {
        // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        const conflictingAppointments = appointmentsHook.appointments.filter(apt => {
          if (apt.appointment_date === appointmentForm.appointment_date) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å–∏ –≤ —Ç–æ–º –∂–µ –∫–∞–±–∏–Ω–µ—Ç–µ
            if (apt.room_id === appointmentForm.room_id) {
              return doTimesOverlapSimple(
                appointmentForm.appointment_time,
                appointmentForm.end_time,
                apt.appointment_time,
                apt.end_time
              );
            }
          }
          return false;
        });
        
        if (conflictingAppointments.length > 0) {
          const conflictNames = conflictingAppointments.map(apt => {
            const patient = patientsHook.patients.find(p => p.id === apt.patient_id);
            return patient ? patient.full_name : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ü–∏–µ–Ω—Ç';
          }).join(', ');
          
          alert(`–û–®–ò–ë–ö–ê: –í—Ä–µ–º—è –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è —Å –∑–∞–ø–∏—Å—è–º–∏: ${conflictNames}\n\n–ò–∑–º–µ–Ω–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏.`);
          setLoading(false);
          return;
        }
      }
      
      if (editingItem) {
        const appointmentId = editingItem._id || editingItem.id;
        const result = await appointmentsHook.updateAppointment(appointmentId, appointmentForm);
        if (!result.success) {
          throw new Error(result.error);
        }
      } else {
        const result = await appointmentsHook.createAppointment(appointmentForm);
        if (!result.success) {
          throw new Error(result.error);
        }
      }

      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
      await appointmentsHook.fetchAppointments();
      
      closeModal('appointment');
    } catch (error) {
      console.error('Error saving appointment:', error);
      const errorMessage = error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏';
      setErrorMessage(errorMessage);
    } finally {
      setLoading(false);
    }
  };

  const handleDeleteAppointment = async (id) => {
    if (window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —ç—Ç—É –∑–∞–ø–∏—Å—å –≤ –∞—Ä—Ö–∏–≤?')) {
      try {
        console.log('Archiving appointment:', id);
        const result = await appointmentsHook.updateAppointmentStatus(id, 'cancelled');
        
        if (!result.success) {
          throw new Error(result.error);
        }
        
        console.log('Appointment archived successfully');
      } catch (error) {
        console.error('Error archiving appointment:', error);
        setErrorMessage('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏');
      }
    }
  };

  const handleStatusChange = async (appointmentId, newStatus) => {
    try {
      const result = await appointmentsHook.updateAppointmentStatus(appointmentId, newStatus);
      
      if (!result.success) {
        throw new Error(result.error);
      }
      
      // –ï—Å–ª–∏ –ø—Ä–∏–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É
      if (newStatus === 'completed') {
        console.log('‚úÖ –ü—Ä–∏–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω');
      }
    } catch (error) {
      console.error('Error updating status:', error);
      setErrorMessage('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞');
    }
  };

  const handleMoveAppointment = async (appointmentId, newDoctorId, newDate, newTime, newRoomId = null) => {
    try {
      setLoading(true);
      
      // –ù–∞—Ö–æ–¥–∏–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ –µ—ë –¥–∞–Ω–Ω—ã–µ
      const originalAppointment = appointmentsHook.appointments.find(apt => 
        (apt._id || apt.id) === appointmentId
      );
      
      if (!originalAppointment) {
        throw new Error('–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –∑–∞–ø–∏—Å–∏ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è
      const updateData = {
        ...originalAppointment,
        doctor_id: newDoctorId,
        appointment_date: newDate,
        appointment_time: newTime,
        room_id: newRoomId,
        // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è
        end_time: originalAppointment.end_time
      };
      
      // –£–¥–∞–ª—è–µ–º –ø–æ–ª—è –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –Ω—É–∂–Ω—ã –¥–ª—è API
      delete updateData._id;
      delete updateData.id;
      
      const result = await appointmentsHook.updateAppointment(appointmentId, updateData);
      
      if (!result.success) {
        throw new Error(result.error);
      }
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
      await appointmentsHook.fetchAppointments();
    } catch (error) {
      console.error('Error moving appointment:', error);
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      let userMessage = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏';
      if (error.message.includes('Time slot already booked')) {
        userMessage = '–≠—Ç–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ—Ç —É–∂–µ –∑–∞–Ω—è—Ç';
      } else if (error.message.includes('400')) {
        userMessage = '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è';
      }
      
      setErrorMessage(userMessage);
      
      // –í–ê–ñ–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –Ω–∞ –º–µ—Å—Ç–æ
      await appointmentsHook.fetchAppointments();
    } finally {
      setLoading(false);
    }
  };

  const handleCloseAppointmentModal = () => {
    setShowAppointmentModal(false);
    setEditingItem(null);
    setAppointmentForm({
      patient_id: '',
      doctor_id: '',
      appointment_date: '',
      appointment_time: '',
      end_time: '',
      price: '',
      status: 'unconfirmed',
      reason: '',
      notes: '',
      patient_notes: '',
      room_id: ''
    });
  };

  // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ü–∏–µ–Ω—Ç–∞ –∏–∑ –∑–∞–ø–∏—Å–∏
  const handleCreatePatientFromAppointment = async (newPatientData) => {
    try {
      setLoading(true);
      const result = await patientsHook.createPatient(newPatientData);
      
      if (result.success) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ—Ä–º—É –∑–∞–ø–∏—Å–∏ —Å –Ω–æ–≤—ã–º –ø–∞—Ü–∏–µ–Ω—Ç–æ–º
        setAppointmentForm(prev => ({
          ...prev,
          patient_id: result.data.id || result.data._id
        }));
      }
      
      return result;
    } catch (error) {
      console.error('Error creating patient from appointment:', error);
      return { success: false, error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞' };
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="space-y-6">
      {/* Error Message */}
      {errorMessage && (
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
          {errorMessage}
          <button 
            onClick={() => setErrorMessage(null)}
            className="float-right font-bold text-red-700 hover:text-red-900"
          >
            √ó
          </button>
        </div>
      )}

      {/* Calendar View */}
      <CalendarView
        appointments={appointmentsHook.appointments}
        doctors={doctorsHook.doctors}
        patients={patientsHook.patients}
        rooms={roomsHook.rooms}
        currentDate={currentDate}
        onDateChange={setCurrentDate}
        user={user}
        onNewAppointment={handleNewAppointment}
        onSlotClick={handleSlotClick}
        onEditAppointment={handleEditAppointment}
        onDeleteAppointment={handleDeleteAppointment}
        onStatusChange={handleStatusChange}
        onMoveAppointment={handleMoveAppointment}
        onRefreshCalendar={appointmentsHook.fetchAppointments}
        canEdit={user?.role === 'admin' || user?.role === 'doctor'}
      />

      {/* –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ —Ç–µ–ø–µ—Ä—å —É–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ ModalManager */}
    </div>
  );
};

export default CalendarPage;
