import React, { useState, useEffect } from 'react';
import { useDoctors } from '../hooks/useDoctors';
import { useGlobalRefresh } from '../hooks/useGlobalRefresh';
import { useModal } from '../context/ModalContext';
import DoctorsView from '../components/doctors/DoctorsView';

const DoctorsPage = ({ user }) => {
  // Data hook
  const doctorsHook = useDoctors();
  const { refreshTriggers } = useGlobalRefresh();
  
  // Modal hook
  const { openModal, closeModal, updateModalProps, getModalProps } = useModal();

  // UI —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const [searchTerm, setSearchTerm] = useState('');
  const [loading, setLoading] = useState(false);
  const [errorMessage, setErrorMessage] = useState(null);

  // –§–æ—Ä–º–∞ –≤—Ä–∞—á–∞ —Ç–µ–ø–µ—Ä—å —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ ModalContext

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    doctorsHook.fetchDoctors();
  }, [doctorsHook.fetchDoctors]);

  // –°–ª—É—à–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
  useEffect(() => {
    console.log('üîÑ –ü–æ–ª—É—á–µ–Ω —Ç—Ä–∏–≥–≥–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–∞—á–µ–π, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫');
    doctorsHook.fetchDoctors();
  }, [refreshTriggers.doctors, doctorsHook.fetchDoctors]);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ –æ—à–∏–±–æ–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
  useEffect(() => {
    if (errorMessage) {
      const timer = setTimeout(() => setErrorMessage(null), 5000);
      return () => clearTimeout(timer);
    }
  }, [errorMessage]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—Ä–∞—á–µ–π
  const handleAddDoctor = () => {
    openModal('doctor', {
      doctorForm: {
        full_name: '',
        specialty: '',
        phone: '',
        calendar_color: '#3B82F6',
        payment_type: 'percentage',
        payment_value: 0,
        currency: 'KZT',
        services: []
      },
      setDoctorForm: (form) => updateModalProps('doctor', { doctorForm: form }),
      editingItem: null,
      loading,
      errorMessage,
      onSave: handleSaveDoctor
    });
  };

  const handleEditDoctor = (doctor) => {
    openModal('doctor', {
      doctorForm: {
        full_name: doctor.full_name || '',
        specialty: doctor.specialty || '',
        phone: doctor.phone || '',
        calendar_color: doctor.calendar_color || '#3B82F6',
        payment_type: doctor.payment_type || 'percentage',
        payment_value: doctor.payment_value || 0,
        currency: doctor.currency || 'KZT',
        services: doctor.services || []
      },
      setDoctorForm: (form) => updateModalProps('doctor', { doctorForm: form }),
      editingItem: doctor,
      loading,
      errorMessage,
      onSave: handleSaveDoctor
    });
  };

  const handleSaveDoctor = async (e, formData = null) => {
    e.preventDefault();
    setLoading(true);
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const modalProps = getModalProps('doctor');
    const { editingItem } = modalProps;
    const doctorForm = formData || modalProps.doctorForm;
    
    try {
      console.log('üîç –§–ò–ù–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï –î–õ–Ø –û–¢–ü–†–ê–í–ö–ò –ù–ê API:');
      console.log('  - formData (–ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –∏–∑ –º–æ–¥–∞–ª–∞):', formData);
      console.log('  - modalProps.doctorForm:', modalProps.doctorForm);
      console.log('  - –§–∏–Ω–∞–ª—å–Ω—ã–π doctorForm:', doctorForm);
      console.log('  - services –≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º doctorForm:', doctorForm?.services);
      console.log('  - payment_mode –≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º doctorForm:', doctorForm?.payment_mode);
      
      // –í—Ä–µ–º–µ–Ω–Ω–æ —É–±–∏—Ä–∞–µ–º –∂–µ—Å—Ç–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
      // if (!doctorForm.full_name || !doctorForm.specialty) {
      //   throw new Error('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: –§–ò–û –∏ –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å');
      // }
      
      // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –ª–∏—à–Ω–∏—Ö –ø–æ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ API
      const cleanDoctorData = {
        full_name: doctorForm?.full_name?.trim() || '',
        specialty: doctorForm?.specialty?.trim() || '',
        phone: doctorForm.phone || null,
        calendar_color: doctorForm.calendar_color || '#3B82F6',
        payment_type: doctorForm.payment_type || 'percentage',
        payment_value: (doctorForm.payment_value && doctorForm.payment_value !== '') ? parseFloat(doctorForm.payment_value) : 0.0,
        currency: doctorForm.currency || 'KZT',
        services: doctorForm.services || []
      };
      
      console.log('üßπ –û—á–∏—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤—Ä–∞—á–∞:', cleanDoctorData);
      
      let result;
      if (editingItem) {
        const doctorId = editingItem._id || editingItem.id;
        console.log('üìù –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–∞—á–∞ ID:', doctorId);
        result = await doctorsHook.updateDoctor(doctorId, cleanDoctorData);
      } else {
        console.log('‚ûï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –≤—Ä–∞—á–∞');
        result = await doctorsHook.createDoctor(cleanDoctorData);
      }
      
      if (!result.success) {
        throw new Error(result.error);
      }

      closeModal('doctor');
    } catch (error) {
      console.error('Error saving doctor:', error);
      setErrorMessage('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤—Ä–∞—á–∞');
    }
    setLoading(false);
  };

  const handleDeleteDoctor = async (id) => {
    if (window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ–≥–æ –≤—Ä–∞—á–∞?')) {
      try {
        console.log('Deactivating doctor:', id);
        const result = await doctorsHook.deleteDoctor(id);
        
        if (!result.success) {
          throw new Error(result.error);
        }
        
        console.log('Doctor deactivated successfully');
      } catch (error) {
        console.error('Error deleting doctor:', error);
        setErrorMessage('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤—Ä–∞—á–∞');
      }
    }
  };

  const handleCloseDoctorModal = () => {
    setShowDoctorModal(false);
    setEditingItem(null);
    setDoctorForm({
      full_name: '',
      specialty: '',
      phone: '',
      email: '',
      calendar_color: '#3B82F6',
      payment_type: 'percentage',
      payment_value: 0,
      currency: 'KZT',
      services: []
    });
  };

  return (
    <div className="space-y-6">
      {/* Error Message */}
      {errorMessage && (
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
          {errorMessage}
          <button 
            onClick={() => setErrorMessage(null)}
            className="float-right font-bold text-red-700 hover:text-red-900"
          >
            √ó
          </button>
        </div>
      )}

      {/* Doctors View */}
      <DoctorsView
        doctors={doctorsHook.doctors}
        searchTerm={searchTerm}
        setSearchTerm={setSearchTerm}
        onAddDoctor={handleAddDoctor}
        onEditDoctor={handleEditDoctor}
        onDeleteDoctor={handleDeleteDoctor}
        canManage={user?.role === 'admin'}
      />

      {/* –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ —Ç–µ–ø–µ—Ä—å —É–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ ModalManager */}
    </div>
  );
};

export default DoctorsPage;
