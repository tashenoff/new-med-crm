#!/usr/bin/env python3
"""
Test script for hybrid payment system in the medical CRM
Tests the new HYBRID payment type functionality
"""
import asyncio
import sys
import os

async def test_hybrid_payments():
    """Test hybrid payment system functionality"""
    try:
        print("üê™ Testing Hybrid Payment System")
        print("=" * 50)

        # Change to backend directory and add to path
        os.chdir('./backend')
        sys.path.insert(0, '.')

        # Import required modules
        from models.doctor import PaymentType, Doctor, DoctorCreate
        from database import db, client

        print("‚úÖ Imported modules successfully")

        # Test 1: Check PaymentType enum includes HYBRID
        print("\nüìã Test 1: PaymentType enum")
        expected_types = ["percentage", "fixed", "hybrid"]
        actual_types = [pt.value for pt in PaymentType]
        print(f"   Expected: {expected_types}")
        print(f"   Actual: {actual_types}")

        assert set(actual_types) == set(expected_types), f"PaymentType mismatch: {actual_types}"
        assert PaymentType.HYBRID.value == "hybrid", "HYBRID enum value incorrect"
        print("   ‚úÖ PaymentType enum includes HYBRID")

        # Test 2: Create test doctor with hybrid payment
        print("\nüë®‚Äç‚öïÔ∏è Test 2: Creating doctor with hybrid payment")

        test_doctor_data = {
            'full_name': 'Dr. Hybrid Test',
            'specialty': 'Dentist',
            'phone': '+7712345678',
            'calendar_color': '#FF6B35',
            'payment_type': 'hybrid',
            'payment_value': 50000.0,  # Fixed amount
            'hybrid_percentage_value': 10.0,  # 10% from revenue
            'consultation_payment_type': 'hybrid',
            'consultation_payment_value': 2000.0,  # Fixed consultation amount
            'consultation_hybrid_percentage_value': 5.0  # 5% from consultation revenue
        }

        # Add required fields for database
        import uuid
        from datetime import datetime
        doctor_dict = test_doctor_data.copy()
        doctor_dict.update({
            'id': str(uuid.uuid4()) + '-hybrid-test',
            'is_active': True,
            'user_id': None,
            'currency': 'KZT',
            'consultation_currency': 'KZT',
            'services': [],
            'payment_mode': 'general',
            'created_at': datetime.utcnow(),
            'updated_at': datetime.utcnow()
        })

        # Insert doctor
        await db.doctors.insert_one(doctor_dict)
        print("   ‚úÖ Doctor created with hybrid payment settings")

        # Test 3: Verify doctor data
        print("\nüîç Test 3: Verify doctor data")
        doctor = await db.doctors.find_one({'id': doctor_dict['id']})

        assert doctor is not None, "Doctor not found in database"
        print(f"   ‚úÖ Doctor found: {doctor['full_name']}")

        # Check hybrid payment fields
        assert doctor['payment_type'] == 'hybrid', f"Payment type incorrect: {doctor['payment_type']}"
        assert doctor['payment_value'] == 50000.0, f"Fixed amount incorrect: {doctor['payment_value']}"
        assert doctor['hybrid_percentage_value'] == 10.0, f"Percentage incorrect: {doctor['hybrid_percentage_value']}"
        assert doctor['consultation_payment_type'] == 'hybrid', f"Consultation payment type incorrect: {doctor['consultation_payment_type']}"
        assert doctor['consultation_payment_value'] == 2000.0, f"Consultation fixed amount incorrect: {doctor['consultation_payment_value']}"
        assert doctor['consultation_hybrid_percentage_value'] == 5.0, f"Consultation percentage incorrect: {doctor['consultation_hybrid_percentage_value']}"
        print("   ‚úÖ All hybrid payment fields verified")

        # Test 4: Test salary calculation logic (simulate)
        print("\nüí∞ Test 4: Salary calculation logic")

        # Mock revenue data
        appointments_revenue = 100000.0  # 100,000 KZT from appointments
        treatment_plans_revenue = 200000.0  # 200,000 KZT from treatment plans

        # Calculate expected salary based on our logic
        expected_consultation_salary = (
            doctor['consultation_payment_value'] +  # 2000
            appointments_revenue * (doctor['consultation_hybrid_percentage_value'] / 100)  # 100000 * 0.05 = 5000
        )  # Total: 7000

        expected_treatment_salary = (
            doctor['payment_value'] +  # 50000
            treatment_plans_revenue * (doctor['hybrid_percentage_value'] / 100)  # 200000 * 0.10 = 20000
        )  # Total: 70000

        expected_total_salary = expected_consultation_salary + expected_treatment_salary  # 77000

        print("   üìä Expected calculations:")
        print(f"     Consultation revenue: {appointments_revenue}")
        print(f"     Treatment plans revenue: {treatment_plans_revenue}")
        print(f"     Expected consultation salary: {expected_consultation_salary}")
        print(f"     Expected treatment salary: {expected_treatment_salary}")
        print(f"     Expected total salary: {expected_total_salary}")

        # All amounts should be positive
        assert expected_consultation_salary > 0, "Consultation salary should be positive"
        assert expected_treatment_salary > 0, "Treatment salary should be positive"
        assert expected_total_salary > 0, "Total salary should be positive"
        print("   ‚úÖ Salary calculation logic verified")

        # Test 5: Model validation
        print("\n‚úÖ Test 5: Model validation")
        doctor_create = DoctorCreate(**test_doctor_data)
        doctor_obj = Doctor(**doctor_dict)

        # Should not raise any validation errors
        print("   ‚úÖ DoctorCreate model validation passed")
        print("   ‚úÖ Doctor model validation passed")

        # Cleanup
        print("\nüßπ Cleaning up test data...")
        await db.doctors.delete_one({'id': doctor_dict['id']})
        print("   ‚úÖ Test doctor removed from database")

        # Close database connection
        client.close()

        print("\nüéâ ALL HYBRID PAYMENT TESTS PASSED!")
        print("=" * 50)
        print("‚úÖ PaymentType enum includes HYBRID")
        print("‚úÖ Doctor creation with hybrid payment works")
        print("‚úÖ Hybrid payment fields are stored correctly")
        print("‚úÖ Salary calculation logic is correct")
        print("‚úÖ Model validation works")
        print("‚úÖ Database cleanup completed")
        print("=" * 50)

        return True

    except Exception as e:
        print(f"\n‚ùå TEST FAILED: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = asyncio.run(test_hybrid_payments())
    sys.exit(0 if success else 1)
